{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.20;\n\nimport {ECDSA} from \"./ECDSA.sol\";\nimport {IERC1271} from \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Safe Wallet (previously Gnosis Safe).\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// A representation of an empty/uninitialized UID.\r\nbytes32 constant EMPTY_UID = 0;\r\n\r\n// A zero expiration represents an non-expiring attestation.\r\nuint64 constant NO_EXPIRATION_TIME = 0;\r\n\r\nerror AccessDenied();\r\nerror DeadlineExpired();\r\nerror InvalidEAS();\r\nerror InvalidLength();\r\nerror InvalidSignature();\r\nerror NotFound();\r\n\r\n/// @notice A struct representing ECDSA signature data.\r\nstruct Signature {\r\n    uint8 v; // The recovery ID.\r\n    bytes32 r; // The x-coordinate of the nonce R.\r\n    bytes32 s; // The signature data.\r\n}\r\n\r\n/// @notice A struct representing a single attestation.\r\nstruct Attestation {\r\n    bytes32 uid; // A unique identifier of the attestation.\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    uint64 time; // The time when the attestation was created (Unix timestamp).\r\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\r\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\r\n    bytes32 refUID; // The UID of the related attestation.\r\n    address recipient; // The recipient of the attestation.\r\n    address attester; // The attester/sender of the attestation.\r\n    bool revocable; // Whether the attestation is revocable.\r\n    bytes data; // Custom attestation data.\r\n}\r\n\r\n/// @notice A helper function to work with unchecked iterators in loops.\r\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\r\n    unchecked {\r\n        j = i + 1;\r\n    }\r\n}\r\n"
    },
    "contracts/EAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport { EIP1271Verifier } from \"./eip1271/EIP1271Verifier.sol\";\r\n\r\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    AccessDenied,\r\n    EMPTY_UID,\r\n    InvalidLength,\r\n    NotFound,\r\n    NO_EXPIRATION_TIME,\r\n    uncheckedInc\r\n} from \"./Common.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    Attestation,\r\n    AttestationRequest,\r\n    AttestationRequestData,\r\n    DelegatedAttestationRequest,\r\n    DelegatedRevocationRequest,\r\n    IEAS,\r\n    MultiAttestationRequest,\r\n    MultiDelegatedAttestationRequest,\r\n    MultiDelegatedRevocationRequest,\r\n    MultiRevocationRequest,\r\n    RevocationRequest,\r\n    RevocationRequestData\r\n} from \"./IEAS.sol\";\r\n\r\nimport { Semver } from \"./Semver.sol\";\r\nimport { ISchemaRegistry, SchemaRecord } from \"./ISchemaRegistry.sol\";\r\n\r\n/// @title EAS\r\n/// @notice The Ethereum Attestation Service protocol.\r\ncontract EAS is IEAS, Semver, EIP1271Verifier {\r\n    using Address for address payable;\r\n\r\n    error AlreadyRevoked();\r\n    error AlreadyRevokedOffchain();\r\n    error AlreadyTimestamped();\r\n    error InsufficientValue();\r\n    error InvalidAttestation();\r\n    error InvalidAttestations();\r\n    error InvalidExpirationTime();\r\n    error InvalidOffset();\r\n    error InvalidRegistry();\r\n    error InvalidRevocation();\r\n    error InvalidRevocations();\r\n    error InvalidSchema();\r\n    error InvalidVerifier();\r\n    error Irrevocable();\r\n    error NotPayable();\r\n    error WrongSchema();\r\n\r\n    /// @notice A struct representing an internal attestation result.\r\n    struct AttestationsResult {\r\n        uint256 usedValue; // Total ETH amount that was sent to resolvers.\r\n        bytes32[] uids; // UIDs of the new attestations.\r\n    }\r\n\r\n    // The global schema registry.\r\n    ISchemaRegistry private immutable _schemaRegistry;\r\n\r\n    // The global mapping between attestations and their UIDs.\r\n    mapping(bytes32 uid => Attestation attestation) private _db;\r\n\r\n    // The global mapping between data and their timestamps.\r\n    mapping(bytes32 data => uint64 timestamp) private _timestamps;\r\n\r\n    // The global mapping between data and their revocation timestamps.\r\n    mapping(address revoker => mapping(bytes32 data => uint64 timestamp) timestamps) private _revocationsOffchain;\r\n\r\n    /// @dev Creates a new EAS instance.\r\n    /// @param registry The address of the global schema registry.\r\n    constructor(ISchemaRegistry registry) Semver(1, 3, 0) EIP1271Verifier(\"EAS\", \"1.3.0\") {\r\n        if (address(registry) == address(0)) {\r\n            revert InvalidRegistry();\r\n        }\r\n\r\n        _schemaRegistry = registry;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function getSchemaRegistry() external view returns (ISchemaRegistry) {\r\n        return _schemaRegistry;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function attest(AttestationRequest calldata request) external payable returns (bytes32) {\r\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\r\n        data[0] = request.data;\r\n\r\n        return _attest(request.schema, data, msg.sender, msg.value, true).uids[0];\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function attestByDelegation(\r\n        DelegatedAttestationRequest calldata delegatedRequest\r\n    ) external payable returns (bytes32) {\r\n        _verifyAttest(delegatedRequest);\r\n\r\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\r\n        data[0] = delegatedRequest.data;\r\n\r\n        return _attest(delegatedRequest.schema, data, delegatedRequest.attester, msg.value, true).uids[0];\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory) {\r\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\r\n        // all the returned UIDs into a single list.\r\n        uint256 length = multiRequests.length;\r\n        bytes32[][] memory totalUIDs = new bytes32[][](length);\r\n        uint256 totalUIDCount = 0;\r\n\r\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\r\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\r\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\r\n        // possible to send too much ETH anyway.\r\n        uint256 availableValue = msg.value;\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\r\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\r\n            // last and final batch).\r\n            bool last;\r\n            unchecked {\r\n                last = i == length - 1;\r\n            }\r\n\r\n            // Process the current batch of attestations.\r\n            MultiAttestationRequest calldata multiRequest = multiRequests[i];\r\n\r\n            // Ensure that data isn't empty.\r\n            if (multiRequest.data.length == 0) {\r\n                revert InvalidLength();\r\n            }\r\n\r\n            AttestationsResult memory res = _attest(\r\n                multiRequest.schema,\r\n                multiRequest.data,\r\n                msg.sender,\r\n                availableValue,\r\n                last\r\n            );\r\n\r\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\r\n            availableValue -= res.usedValue;\r\n\r\n            // Collect UIDs (and merge them later).\r\n            totalUIDs[i] = res.uids;\r\n            unchecked {\r\n                totalUIDCount += res.uids.length;\r\n            }\r\n        }\r\n\r\n        // Merge all the collected UIDs and return them as a flatten array.\r\n        return _mergeUIDs(totalUIDs, totalUIDCount);\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function multiAttestByDelegation(\r\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\r\n    ) external payable returns (bytes32[] memory) {\r\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\r\n        // all the returned UIDs into a single list.\r\n        uint256 length = multiDelegatedRequests.length;\r\n        bytes32[][] memory totalUIDs = new bytes32[][](length);\r\n        uint256 totalUIDCount = 0;\r\n\r\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\r\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\r\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\r\n        // possible to send too much ETH anyway.\r\n        uint256 availableValue = msg.value;\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\r\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\r\n            // last and final batch).\r\n            bool last;\r\n            unchecked {\r\n                last = i == length - 1;\r\n            }\r\n\r\n            MultiDelegatedAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\r\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\r\n\r\n            // Ensure that no inputs are missing.\r\n            uint256 dataLength = data.length;\r\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\r\n                revert InvalidLength();\r\n            }\r\n\r\n            // Verify signatures. Please note that the signatures are assumed to be signed with increasing nonces.\r\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\r\n                _verifyAttest(\r\n                    DelegatedAttestationRequest({\r\n                        schema: multiDelegatedRequest.schema,\r\n                        data: data[j],\r\n                        signature: multiDelegatedRequest.signatures[j],\r\n                        attester: multiDelegatedRequest.attester,\r\n                        deadline: multiDelegatedRequest.deadline\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Process the current batch of attestations.\r\n            AttestationsResult memory res = _attest(\r\n                multiDelegatedRequest.schema,\r\n                data,\r\n                multiDelegatedRequest.attester,\r\n                availableValue,\r\n                last\r\n            );\r\n\r\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\r\n            availableValue -= res.usedValue;\r\n\r\n            // Collect UIDs (and merge them later).\r\n            totalUIDs[i] = res.uids;\r\n            unchecked {\r\n                totalUIDCount += res.uids.length;\r\n            }\r\n        }\r\n\r\n        // Merge all the collected UIDs and return them as a flatten array.\r\n        return _mergeUIDs(totalUIDs, totalUIDCount);\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function revoke(RevocationRequest calldata request) external payable {\r\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\r\n        data[0] = request.data;\r\n\r\n        _revoke(request.schema, data, msg.sender, msg.value, true);\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable {\r\n        _verifyRevoke(delegatedRequest);\r\n\r\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\r\n        data[0] = delegatedRequest.data;\r\n\r\n        _revoke(delegatedRequest.schema, data, delegatedRequest.revoker, msg.value, true);\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable {\r\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\r\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\r\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\r\n        // possible to send too much ETH anyway.\r\n        uint256 availableValue = msg.value;\r\n\r\n        uint256 length = multiRequests.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\r\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\r\n            // last and final batch).\r\n            bool last;\r\n            unchecked {\r\n                last = i == length - 1;\r\n            }\r\n\r\n            MultiRevocationRequest calldata multiRequest = multiRequests[i];\r\n\r\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\r\n            availableValue -= _revoke(multiRequest.schema, multiRequest.data, msg.sender, availableValue, last);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function multiRevokeByDelegation(\r\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\r\n    ) external payable {\r\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\r\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\r\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\r\n        // possible to send too much ETH anyway.\r\n        uint256 availableValue = msg.value;\r\n\r\n        uint256 length = multiDelegatedRequests.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\r\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\r\n            // last and final batch).\r\n            bool last;\r\n            unchecked {\r\n                last = i == length - 1;\r\n            }\r\n\r\n            MultiDelegatedRevocationRequest memory multiDelegatedRequest = multiDelegatedRequests[i];\r\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\r\n\r\n            // Ensure that no inputs are missing.\r\n            uint256 dataLength = data.length;\r\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\r\n                revert InvalidLength();\r\n            }\r\n\r\n            // Verify signatures. Please note that the signatures are assumed to be signed with increasing nonces.\r\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\r\n                _verifyRevoke(\r\n                    DelegatedRevocationRequest({\r\n                        schema: multiDelegatedRequest.schema,\r\n                        data: data[j],\r\n                        signature: multiDelegatedRequest.signatures[j],\r\n                        revoker: multiDelegatedRequest.revoker,\r\n                        deadline: multiDelegatedRequest.deadline\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\r\n            availableValue -= _revoke(\r\n                multiDelegatedRequest.schema,\r\n                data,\r\n                multiDelegatedRequest.revoker,\r\n                availableValue,\r\n                last\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function timestamp(bytes32 data) external returns (uint64) {\r\n        uint64 time = _time();\r\n\r\n        _timestamp(data, time);\r\n\r\n        return time;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function revokeOffchain(bytes32 data) external returns (uint64) {\r\n        uint64 time = _time();\r\n\r\n        _revokeOffchain(msg.sender, data, time);\r\n\r\n        return time;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64) {\r\n        uint64 time = _time();\r\n\r\n        uint256 length = data.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            _revokeOffchain(msg.sender, data[i], time);\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64) {\r\n        uint64 time = _time();\r\n\r\n        uint256 length = data.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            _timestamp(data[i], time);\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function getAttestation(bytes32 uid) external view returns (Attestation memory) {\r\n        return _db[uid];\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function isAttestationValid(bytes32 uid) public view returns (bool) {\r\n        return _db[uid].uid != EMPTY_UID;\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function getTimestamp(bytes32 data) external view returns (uint64) {\r\n        return _timestamps[data];\r\n    }\r\n\r\n    /// @inheritdoc IEAS\r\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64) {\r\n        return _revocationsOffchain[revoker][data];\r\n    }\r\n\r\n    /// @dev Attests to a specific schema.\r\n    /// @param schemaUID The unique identifier of the schema to attest to.\r\n    /// @param data The arguments of the attestation requests.\r\n    /// @param attester The attesting account.\r\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\r\n    /// @param last Whether this is the last attestations/revocations set.\r\n    /// @return The UID of the new attestations and the total sent ETH amount.\r\n    function _attest(\r\n        bytes32 schemaUID,\r\n        AttestationRequestData[] memory data,\r\n        address attester,\r\n        uint256 availableValue,\r\n        bool last\r\n    ) private returns (AttestationsResult memory) {\r\n        uint256 length = data.length;\r\n\r\n        AttestationsResult memory res;\r\n        res.uids = new bytes32[](length);\r\n\r\n        // Ensure that we aren't attempting to attest to a non-existing schema.\r\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\r\n        if (schemaRecord.uid == EMPTY_UID) {\r\n            revert InvalidSchema();\r\n        }\r\n\r\n        Attestation[] memory attestations = new Attestation[](length);\r\n        uint256[] memory values = new uint256[](length);\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            AttestationRequestData memory request = data[i];\r\n\r\n            // Ensure that either no expiration time was set or that it was set in the future.\r\n            if (request.expirationTime != NO_EXPIRATION_TIME && request.expirationTime <= _time()) {\r\n                revert InvalidExpirationTime();\r\n            }\r\n\r\n            // Ensure that we aren't trying to make a revocable attestation for a non-revocable schema.\r\n            if (!schemaRecord.revocable && request.revocable) {\r\n                revert Irrevocable();\r\n            }\r\n\r\n            Attestation memory attestation = Attestation({\r\n                uid: EMPTY_UID,\r\n                schema: schemaUID,\r\n                refUID: request.refUID,\r\n                time: _time(),\r\n                expirationTime: request.expirationTime,\r\n                revocationTime: 0,\r\n                recipient: request.recipient,\r\n                attester: attester,\r\n                revocable: request.revocable,\r\n                data: request.data\r\n            });\r\n\r\n            // Look for the first non-existing UID (and use a bump seed/nonce in the rare case of a conflict).\r\n            bytes32 uid;\r\n            uint32 bump = 0;\r\n            while (true) {\r\n                uid = _getUID(attestation, bump);\r\n                if (_db[uid].uid == EMPTY_UID) {\r\n                    break;\r\n                }\r\n\r\n                unchecked {\r\n                    ++bump;\r\n                }\r\n            }\r\n            attestation.uid = uid;\r\n\r\n            _db[uid] = attestation;\r\n\r\n            if (request.refUID != EMPTY_UID) {\r\n                // Ensure that we aren't trying to attest to a non-existing referenced UID.\r\n                if (!isAttestationValid(request.refUID)) {\r\n                    revert NotFound();\r\n                }\r\n            }\r\n\r\n            attestations[i] = attestation;\r\n            values[i] = request.value;\r\n\r\n            res.uids[i] = uid;\r\n\r\n            emit Attested(request.recipient, attester, uid, schemaUID);\r\n        }\r\n\r\n        res.usedValue = _resolveAttestations(schemaRecord, attestations, values, false, availableValue, last);\r\n\r\n        return res;\r\n    }\r\n\r\n    /// @dev Revokes an existing attestation to a specific schema.\r\n    /// @param schemaUID The unique identifier of the schema to attest to.\r\n    /// @param data The arguments of the revocation requests.\r\n    /// @param revoker The revoking account.\r\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\r\n    /// @param last Whether this is the last attestations/revocations set.\r\n    /// @return Returns the total sent ETH amount.\r\n    function _revoke(\r\n        bytes32 schemaUID,\r\n        RevocationRequestData[] memory data,\r\n        address revoker,\r\n        uint256 availableValue,\r\n        bool last\r\n    ) private returns (uint256) {\r\n        // Ensure that a non-existing schema ID wasn't passed by accident.\r\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schemaUID);\r\n        if (schemaRecord.uid == EMPTY_UID) {\r\n            revert InvalidSchema();\r\n        }\r\n\r\n        uint256 length = data.length;\r\n        Attestation[] memory attestations = new Attestation[](length);\r\n        uint256[] memory values = new uint256[](length);\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            RevocationRequestData memory request = data[i];\r\n\r\n            Attestation storage attestation = _db[request.uid];\r\n\r\n            // Ensure that we aren't attempting to revoke a non-existing attestation.\r\n            if (attestation.uid == EMPTY_UID) {\r\n                revert NotFound();\r\n            }\r\n\r\n            // Ensure that a wrong schema ID wasn't passed by accident.\r\n            if (attestation.schema != schemaUID) {\r\n                revert InvalidSchema();\r\n            }\r\n\r\n            // Allow only original attesters to revoke their attestations.\r\n            if (attestation.attester != revoker) {\r\n                revert AccessDenied();\r\n            }\r\n\r\n            // Please note that also checking of the schema itself is revocable is unnecessary, since it's not possible to\r\n            // make revocable attestations to an irrevocable schema.\r\n            if (!attestation.revocable) {\r\n                revert Irrevocable();\r\n            }\r\n\r\n            // Ensure that we aren't trying to revoke the same attestation twice.\r\n            if (attestation.revocationTime != 0) {\r\n                revert AlreadyRevoked();\r\n            }\r\n            attestation.revocationTime = _time();\r\n\r\n            attestations[i] = attestation;\r\n            values[i] = request.value;\r\n\r\n            emit Revoked(attestations[i].recipient, revoker, request.uid, schemaUID);\r\n        }\r\n\r\n        return _resolveAttestations(schemaRecord, attestations, values, true, availableValue, last);\r\n    }\r\n\r\n    /// @dev Resolves a new attestation or a revocation of an existing attestation.\r\n    /// @param schemaRecord The schema of the attestation.\r\n    /// @param attestation The data of the attestation to make/revoke.\r\n    /// @param value An explicit ETH amount to send to the resolver.\r\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\r\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\r\n    /// @param last Whether this is the last attestations/revocations set.\r\n    /// @return Returns the total sent ETH amount.\r\n    function _resolveAttestation(\r\n        SchemaRecord memory schemaRecord,\r\n        Attestation memory attestation,\r\n        uint256 value,\r\n        bool isRevocation,\r\n        uint256 availableValue,\r\n        bool last\r\n    ) private returns (uint256) {\r\n        ISchemaResolver resolver = schemaRecord.resolver;\r\n        if (address(resolver) == address(0)) {\r\n            // Ensure that we don't accept payments if there is no resolver.\r\n            if (value != 0) {\r\n                revert NotPayable();\r\n            }\r\n\r\n            if (last) {\r\n                _refund(availableValue);\r\n            }\r\n\r\n            return 0;\r\n        }\r\n\r\n        // Ensure that we don't accept payments which can't be forwarded to the resolver.\r\n        if (value != 0) {\r\n            if (!resolver.isPayable()) {\r\n                revert NotPayable();\r\n            }\r\n\r\n            // Ensure that the attester/revoker doesn't try to spend more than available.\r\n            if (value > availableValue) {\r\n                revert InsufficientValue();\r\n            }\r\n\r\n            // Ensure to deduct the sent value explicitly.\r\n            unchecked {\r\n                availableValue -= value;\r\n            }\r\n        }\r\n\r\n        if (isRevocation) {\r\n            if (!resolver.revoke{ value: value }(attestation)) {\r\n                revert InvalidRevocation();\r\n            }\r\n        } else if (!resolver.attest{ value: value }(attestation)) {\r\n            revert InvalidAttestation();\r\n        }\r\n\r\n        if (last) {\r\n            _refund(availableValue);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /// @dev Resolves multiple attestations or revocations of existing attestations.\r\n    /// @param schemaRecord The schema of the attestation.\r\n    /// @param attestations The data of the attestations to make/revoke.\r\n    /// @param values Explicit ETH amounts to send to the resolver.\r\n    /// @param isRevocation Whether to resolve an attestation or its revocation.\r\n    /// @param availableValue The total available ETH amount that can be sent to the resolver.\r\n    /// @param last Whether this is the last attestations/revocations set.\r\n    /// @return Returns the total sent ETH amount.\r\n    function _resolveAttestations(\r\n        SchemaRecord memory schemaRecord,\r\n        Attestation[] memory attestations,\r\n        uint256[] memory values,\r\n        bool isRevocation,\r\n        uint256 availableValue,\r\n        bool last\r\n    ) private returns (uint256) {\r\n        uint256 length = attestations.length;\r\n        if (length == 1) {\r\n            return _resolveAttestation(schemaRecord, attestations[0], values[0], isRevocation, availableValue, last);\r\n        }\r\n\r\n        ISchemaResolver resolver = schemaRecord.resolver;\r\n        if (address(resolver) == address(0)) {\r\n            // Ensure that we don't accept payments if there is no resolver.\r\n            for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n                if (values[i] != 0) {\r\n                    revert NotPayable();\r\n                }\r\n            }\r\n\r\n            if (last) {\r\n                _refund(availableValue);\r\n            }\r\n\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalUsedValue = 0;\r\n        bool isResolverPayable = resolver.isPayable();\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            uint256 value = values[i];\r\n\r\n            // Ensure that we don't accept payments which can't be forwarded to the resolver.\r\n            if (value == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (!isResolverPayable) {\r\n                revert NotPayable();\r\n            }\r\n\r\n            // Ensure that the attester/revoker doesn't try to spend more than available.\r\n            if (value > availableValue) {\r\n                revert InsufficientValue();\r\n            }\r\n\r\n            // Ensure to deduct the sent value explicitly and add it to the total used value by the batch.\r\n            unchecked {\r\n                availableValue -= value;\r\n                totalUsedValue += value;\r\n            }\r\n        }\r\n\r\n        if (isRevocation) {\r\n            if (!resolver.multiRevoke{ value: totalUsedValue }(attestations, values)) {\r\n                revert InvalidRevocations();\r\n            }\r\n        } else if (!resolver.multiAttest{ value: totalUsedValue }(attestations, values)) {\r\n            revert InvalidAttestations();\r\n        }\r\n\r\n        if (last) {\r\n            _refund(availableValue);\r\n        }\r\n\r\n        return totalUsedValue;\r\n    }\r\n\r\n    /// @dev Calculates a UID for a given attestation.\r\n    /// @param attestation The input attestation.\r\n    /// @param bump A bump value to use in case of a UID conflict.\r\n    /// @return Attestation UID.\r\n    function _getUID(Attestation memory attestation, uint32 bump) private pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    attestation.schema,\r\n                    attestation.recipient,\r\n                    attestation.attester,\r\n                    attestation.time,\r\n                    attestation.expirationTime,\r\n                    attestation.revocable,\r\n                    attestation.refUID,\r\n                    attestation.data,\r\n                    bump\r\n                )\r\n            );\r\n    }\r\n\r\n    /// @dev Refunds remaining ETH amount to the attester.\r\n    /// @param remainingValue The remaining ETH amount that was not sent to the resolver.\r\n    function _refund(uint256 remainingValue) private {\r\n        if (remainingValue > 0) {\r\n            // Using a regular transfer here might revert, for some non-EOA attesters, due to exceeding of the 2300\r\n            // gas limit which is why we're using call instead (via sendValue), which the 2300 gas limit does not\r\n            // apply for.\r\n            payable(msg.sender).sendValue(remainingValue);\r\n        }\r\n    }\r\n\r\n    /// @dev Timestamps the specified bytes32 data.\r\n    /// @param data The data to timestamp.\r\n    /// @param time The timestamp.\r\n    function _timestamp(bytes32 data, uint64 time) private {\r\n        if (_timestamps[data] != 0) {\r\n            revert AlreadyTimestamped();\r\n        }\r\n\r\n        _timestamps[data] = time;\r\n\r\n        emit Timestamped(data, time);\r\n    }\r\n\r\n    /// @dev Revokes the specified bytes32 data.\r\n    /// @param revoker The revoking account.\r\n    /// @param data The data to revoke.\r\n    /// @param time The timestamp the data was revoked with.\r\n    function _revokeOffchain(address revoker, bytes32 data, uint64 time) private {\r\n        mapping(bytes32 data => uint64 timestamp) storage revocations = _revocationsOffchain[revoker];\r\n\r\n        if (revocations[data] != 0) {\r\n            revert AlreadyRevokedOffchain();\r\n        }\r\n\r\n        revocations[data] = time;\r\n\r\n        emit RevokedOffchain(revoker, data, time);\r\n    }\r\n\r\n    /// @dev Merges lists of UIDs.\r\n    /// @param uidLists The provided lists of UIDs.\r\n    /// @param uidCount Total UID count.\r\n    /// @return A merged and flatten list of all the UIDs.\r\n    function _mergeUIDs(bytes32[][] memory uidLists, uint256 uidCount) private pure returns (bytes32[] memory) {\r\n        bytes32[] memory uids = new bytes32[](uidCount);\r\n\r\n        uint256 currentIndex = 0;\r\n        uint256 uidListLength = uidLists.length;\r\n        for (uint256 i = 0; i < uidListLength; i = uncheckedInc(i)) {\r\n            bytes32[] memory currentUIDs = uidLists[i];\r\n            uint256 currentUIDsLength = currentUIDs.length;\r\n            for (uint256 j = 0; j < currentUIDsLength; j = uncheckedInc(j)) {\r\n                uids[currentIndex] = currentUIDs[j];\r\n\r\n                unchecked {\r\n                    ++currentIndex;\r\n                }\r\n            }\r\n        }\r\n\r\n        return uids;\r\n    }\r\n}\r\n"
    },
    "contracts/eip1271/EIP1271Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport { EIP712 } from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\r\nimport { SignatureChecker } from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\r\nimport { DeadlineExpired, NO_EXPIRATION_TIME, Signature, InvalidSignature } from \"./../Common.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    AttestationRequestData,\r\n    DelegatedAttestationRequest,\r\n    DelegatedRevocationRequest,\r\n    RevocationRequestData\r\n} from \"../IEAS.sol\";\r\n\r\n/// @title EIP1271Verifier\r\n/// @notice EIP1271Verifier typed signatures verifier for EAS delegated attestations.\r\nabstract contract EIP1271Verifier is EIP712 {\r\n    using Address for address;\r\n\r\n    error InvalidNonce();\r\n\r\n    // The hash of the data type used to relay calls to the attest function. It's the value of\r\n    // keccak256(\"Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)\").\r\n    bytes32 private constant ATTEST_TYPEHASH = 0xfeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076;\r\n\r\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\r\n    // keccak256(\"Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)\").\r\n    bytes32 private constant REVOKE_TYPEHASH = 0xb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e75;\r\n\r\n    // The user readable name of the signing domain.\r\n    string private _name;\r\n\r\n    // Replay protection nonces.\r\n    mapping(address attester => uint256 nonce) private _nonces;\r\n\r\n    /// @notice Emitted when users invalidate nonces by increasing their nonces to (higher) new values.\r\n    /// @param oldNonce The previous nonce.\r\n    /// @param newNonce The new value.\r\n    event NonceIncreased(uint256 oldNonce, uint256 newNonce);\r\n\r\n    /// @dev Creates a new EIP1271Verifier instance.\r\n    /// @param version The current major version of the signing domain\r\n    constructor(string memory name, string memory version) EIP712(name, version) {\r\n        _name = name;\r\n    }\r\n\r\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and revoke.\r\n    /// @return The domain separator used in the encoding of the signatures for attest, and revoke.\r\n    function getDomainSeparator() external view returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n\r\n    /// @notice Returns the current nonce per-account.\r\n    /// @param account The requested account.\r\n    /// @return The current nonce.\r\n    function getNonce(address account) external view returns (uint256) {\r\n        return _nonces[account];\r\n    }\r\n\r\n    /// @notice Returns the EIP712 type hash for the attest function.\r\n    /// @return The EIP712 type hash for the attest function.\r\n    function getAttestTypeHash() external pure returns (bytes32) {\r\n        return ATTEST_TYPEHASH;\r\n    }\r\n\r\n    /// @notice Returns the EIP712 type hash for the revoke function.\r\n    /// @return The EIP712 type hash for the revoke function.\r\n    function getRevokeTypeHash() external pure returns (bytes32) {\r\n        return REVOKE_TYPEHASH;\r\n    }\r\n\r\n    /// @notice Returns the EIP712 name.\r\n    /// @return The EIP712 name.\r\n    function getName() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /// @notice Provides users an option to invalidate nonces by increasing their nonces to (higher) new values.\r\n    /// @param newNonce The (higher) new value.\r\n    function increaseNonce(uint256 newNonce) external {\r\n        uint256 oldNonce = _nonces[msg.sender];\r\n        if (newNonce <= oldNonce) {\r\n            revert InvalidNonce();\r\n        }\r\n\r\n        _nonces[msg.sender] = newNonce;\r\n\r\n        emit NonceIncreased({ oldNonce: oldNonce, newNonce: newNonce });\r\n    }\r\n\r\n    /// @dev Verifies delegated attestation request.\r\n    /// @param request The arguments of the delegated attestation request.\r\n    function _verifyAttest(DelegatedAttestationRequest memory request) internal {\r\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\r\n            revert DeadlineExpired();\r\n        }\r\n\r\n        AttestationRequestData memory data = request.data;\r\n        Signature memory signature = request.signature;\r\n\r\n        bytes32 hash = _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    ATTEST_TYPEHASH,\r\n                    request.attester,\r\n                    request.schema,\r\n                    data.recipient,\r\n                    data.expirationTime,\r\n                    data.revocable,\r\n                    data.refUID,\r\n                    keccak256(data.data),\r\n                    data.value,\r\n                    _nonces[request.attester]++,\r\n                    request.deadline\r\n                )\r\n            )\r\n        );\r\n        if (\r\n            !SignatureChecker.isValidSignatureNow(\r\n                request.attester,\r\n                hash,\r\n                abi.encodePacked(signature.r, signature.s, signature.v)\r\n            )\r\n        ) {\r\n            revert InvalidSignature();\r\n        }\r\n    }\r\n\r\n    /// @dev Verifies delegated revocation request.\r\n    /// @param request The arguments of the delegated revocation request.\r\n    function _verifyRevoke(DelegatedRevocationRequest memory request) internal {\r\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\r\n            revert DeadlineExpired();\r\n        }\r\n\r\n        RevocationRequestData memory data = request.data;\r\n        Signature memory signature = request.signature;\r\n\r\n        bytes32 hash = _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    REVOKE_TYPEHASH,\r\n                    request.revoker,\r\n                    request.schema,\r\n                    data.uid,\r\n                    data.value,\r\n                    _nonces[request.revoker]++,\r\n                    request.deadline\r\n                )\r\n            )\r\n        );\r\n        if (\r\n            !SignatureChecker.isValidSignatureNow(\r\n                request.revoker,\r\n                hash,\r\n                abi.encodePacked(signature.r, signature.s, signature.v)\r\n            )\r\n        ) {\r\n            revert InvalidSignature();\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\r\n    ///     current block time.\r\n    function _time() internal view virtual returns (uint64) {\r\n        return uint64(block.timestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/eip712/proxy/EIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { EIP712 } from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\r\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    AccessDenied,\r\n    DeadlineExpired,\r\n    Signature,\r\n    InvalidEAS,\r\n    InvalidLength,\r\n    InvalidSignature,\r\n    NotFound,\r\n    NO_EXPIRATION_TIME,\r\n    uncheckedInc\r\n} from \"../../Common.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    AttestationRequest,\r\n    AttestationRequestData,\r\n    IEAS,\r\n    MultiAttestationRequest,\r\n    MultiRevocationRequest,\r\n    RevocationRequest,\r\n    RevocationRequestData\r\n} from \"../../IEAS.sol\";\r\n\r\nimport { Semver } from \"../../Semver.sol\";\r\n\r\n/// @notice A struct representing the full arguments of the full delegated attestation request.\r\nstruct DelegatedProxyAttestationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    AttestationRequestData data; // The arguments of the attestation request.\r\n    Signature signature; // The EIP712 signature data.\r\n    address attester; // The attesting account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\r\nstruct MultiDelegatedProxyAttestationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    AttestationRequestData[] data; // The arguments of the attestation requests.\r\n    Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\r\n    address attester; // The attesting account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @notice A struct representing the arguments of the full delegated revocation request.\r\nstruct DelegatedProxyRevocationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    RevocationRequestData data; // The arguments of the revocation request.\r\n    Signature signature; // The EIP712 signature data.\r\n    address revoker; // The revoking account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\r\nstruct MultiDelegatedProxyRevocationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    RevocationRequestData[] data; // The arguments of the revocation requests.\r\n    Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\r\n    address revoker; // The revoking account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @title EIP712Proxy\r\n/// @notice This utility contract an be used to aggregate delegated attestations without requiring a specific order via\r\n///     nonces. The contract doesn't request nonces and implements replay protection by storing ***immalleable***\r\n///     signatures.\r\ncontract EIP712Proxy is Semver, EIP712 {\r\n    error UsedSignature();\r\n\r\n    // The hash of the data type used to relay calls to the attest function. It's the value of\r\n    // keccak256(\"Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)\").\r\n    bytes32 private constant ATTEST_PROXY_TYPEHASH = 0xea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af1;\r\n\r\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\r\n    // keccak256(\"Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint64 deadline)\").\r\n    bytes32 private constant REVOKE_PROXY_TYPEHASH = 0x78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d;\r\n\r\n    // The global EAS contract.\r\n    IEAS private immutable _eas;\r\n\r\n    // The user readable name of the signing domain.\r\n    string private _name;\r\n\r\n    // The global mapping between proxy attestations and their attesters, so that we can verify that only the original\r\n    // attester is able to revert attestations by proxy.\r\n    mapping(bytes32 uid => address attester) private _attesters;\r\n\r\n    // Replay protection signatures.\r\n    mapping(bytes signature => bool used) private _signatures;\r\n\r\n    /// @dev Creates a new EIP1271Verifier instance.\r\n    /// @param eas The address of the global EAS contract.\r\n    /// @param name The user readable name of the signing domain.\r\n    constructor(IEAS eas, string memory name) Semver(1, 4, 0) EIP712(name, \"1.4.0\") {\r\n        if (address(eas) == address(0)) {\r\n            revert InvalidEAS();\r\n        }\r\n\r\n        _eas = eas;\r\n        _name = name;\r\n    }\r\n\r\n    /// @notice Returns the EAS.\r\n    function getEAS() external view returns (IEAS) {\r\n        return _eas;\r\n    }\r\n\r\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and revoke.\r\n    function getDomainSeparator() external view returns (bytes32) {\r\n        return _domainSeparatorV4();\r\n    }\r\n\r\n    /// Returns the EIP712 type hash for the attest function.\r\n    function getAttestTypeHash() external pure returns (bytes32) {\r\n        return ATTEST_PROXY_TYPEHASH;\r\n    }\r\n\r\n    /// Returns the EIP712 type hash for the revoke function.\r\n    function getRevokeTypeHash() external pure returns (bytes32) {\r\n        return REVOKE_PROXY_TYPEHASH;\r\n    }\r\n\r\n    /// Returns the EIP712 name.\r\n    function getName() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /// Returns the attester for a given uid.\r\n    function getAttester(bytes32 uid) external view returns (address) {\r\n        return _attesters[uid];\r\n    }\r\n\r\n    /// @notice Attests to a specific schema via the provided EIP712 signature.\r\n    /// @param delegatedRequest The arguments of the delegated attestation request.\r\n    /// @return The UID of the new attestation.\r\n    ///\r\n    /// Example:\r\n    ///     attestByDelegation({\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: {\r\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n    ///             expirationTime: 1673891048,\r\n    ///             revocable: true,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x1234',\r\n    ///             value: 0\r\n    ///         },\r\n    ///         signature: {\r\n    ///             v: 28,\r\n    ///             r: '0x148c...b25b',\r\n    ///             s: '0x5a72...be22'\r\n    ///         },\r\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\r\n    ///         deadline: 1673891048\r\n    ///     })\r\n    function attestByDelegation(\r\n        DelegatedProxyAttestationRequest calldata delegatedRequest\r\n    ) public payable virtual returns (bytes32) {\r\n        _verifyAttest(delegatedRequest);\r\n\r\n        bytes32 uid = _eas.attest{ value: msg.value }(\r\n            AttestationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\r\n        );\r\n\r\n        _attesters[uid] = delegatedRequest.attester;\r\n\r\n        return uid;\r\n    }\r\n\r\n    /// @notice Attests to multiple schemas using via provided EIP712 signatures.\r\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\r\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\r\n    /// @return The UIDs of the new attestations.\r\n    ///\r\n    /// Example:\r\n    ///     multiAttestByDelegation([{\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: [{\r\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n    ///             expirationTime: 1673891048,\r\n    ///             revocable: true,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x1234',\r\n    ///             value: 0\r\n    ///         },\r\n    ///         {\r\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\r\n    ///             expirationTime: 0,\r\n    ///             revocable: false,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x00',\r\n    ///             value: 0\r\n    ///         }],\r\n    ///         signatures: [{\r\n    ///             v: 28,\r\n    ///             r: '0x148c...b25b',\r\n    ///             s: '0x5a72...be22'\r\n    ///         },\r\n    ///         {\r\n    ///             v: 28,\r\n    ///             r: '0x487s...67bb',\r\n    ///             s: '0x12ad...2366'\r\n    ///         }],\r\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\r\n    ///         deadline: 1673891048\r\n    ///     }])\r\n    function multiAttestByDelegation(\r\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\r\n    ) public payable virtual returns (bytes32[] memory) {\r\n        uint256 length = multiDelegatedRequests.length;\r\n        MultiAttestationRequest[] memory multiRequests = new MultiAttestationRequest[](length);\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\r\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\r\n\r\n            // Ensure that no inputs are missing.\r\n            uint256 dataLength = data.length;\r\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\r\n                revert InvalidLength();\r\n            }\r\n\r\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\r\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\r\n                _verifyAttest(\r\n                    DelegatedProxyAttestationRequest({\r\n                        schema: multiDelegatedRequest.schema,\r\n                        data: data[j],\r\n                        signature: multiDelegatedRequest.signatures[j],\r\n                        attester: multiDelegatedRequest.attester,\r\n                        deadline: multiDelegatedRequest.deadline\r\n                    })\r\n                );\r\n            }\r\n\r\n            multiRequests[i] = MultiAttestationRequest({ schema: multiDelegatedRequest.schema, data: data });\r\n        }\r\n\r\n        bytes32[] memory uids = _eas.multiAttest{ value: msg.value }(multiRequests);\r\n\r\n        // Store all attesters, according to the order of the attestation requests.\r\n        uint256 uidCounter = 0;\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\r\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\r\n\r\n            uint256 dataLength = data.length;\r\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\r\n                _attesters[uids[uidCounter]] = multiDelegatedRequest.attester;\r\n\r\n                unchecked {\r\n                    ++uidCounter;\r\n                }\r\n            }\r\n        }\r\n\r\n        return uids;\r\n    }\r\n\r\n    /// @notice Revokes an existing attestation to a specific schema via the provided EIP712 signature.\r\n    /// @param delegatedRequest The arguments of the delegated revocation request.\r\n    ///\r\n    /// Example:\r\n    ///     revokeByDelegation({\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: {\r\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\r\n    ///             value: 0\r\n    ///         },\r\n    ///         signature: {\r\n    ///             v: 27,\r\n    ///             r: '0xb593...7142',\r\n    ///             s: '0x0f5b...2cce'\r\n    ///         },\r\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\r\n    ///         deadline: 1673891048\r\n    ///     })\r\n    function revokeByDelegation(DelegatedProxyRevocationRequest calldata delegatedRequest) public payable virtual {\r\n        _verifyRevoke(delegatedRequest);\r\n\r\n        return\r\n            _eas.revoke{ value: msg.value }(\r\n                RevocationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\r\n            );\r\n    }\r\n\r\n    /// @notice Revokes existing attestations to multiple schemas via provided EIP712 signatures.\r\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\r\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\r\n    ///\r\n    /// Example:\r\n    ///     multiRevokeByDelegation([{\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: [{\r\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\r\n    ///             value: 1000\r\n    ///         },\r\n    ///         {\r\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\r\n    ///             value: 0\r\n    ///         }],\r\n    ///         signatures: [{\r\n    ///             v: 28,\r\n    ///             r: '0x148c...b25b',\r\n    ///             s: '0x5a72...be22'\r\n    ///         },\r\n    ///         {\r\n    ///             v: 28,\r\n    ///             r: '0x487s...67bb',\r\n    ///             s: '0x12ad...2366'\r\n    ///         }],\r\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\r\n    ///         deadline: 1673891048\r\n    ///     }])\r\n    function multiRevokeByDelegation(\r\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\r\n    ) public payable virtual {\r\n        uint256 length = multiDelegatedRequests.length;\r\n        MultiRevocationRequest[] memory multiRequests = new MultiRevocationRequest[](length);\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            MultiDelegatedProxyRevocationRequest memory multiDelegatedRequest = multiDelegatedRequests[i];\r\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\r\n\r\n            // Ensure that no inputs are missing.\r\n            uint256 dataLength = data.length;\r\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\r\n                revert InvalidLength();\r\n            }\r\n\r\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\r\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\r\n                RevocationRequestData memory requestData = data[j];\r\n\r\n                _verifyRevoke(\r\n                    DelegatedProxyRevocationRequest({\r\n                        schema: multiDelegatedRequest.schema,\r\n                        data: requestData,\r\n                        signature: multiDelegatedRequest.signatures[j],\r\n                        revoker: multiDelegatedRequest.revoker,\r\n                        deadline: multiDelegatedRequest.deadline\r\n                    })\r\n                );\r\n            }\r\n\r\n            multiRequests[i] = MultiRevocationRequest({ schema: multiDelegatedRequest.schema, data: data });\r\n        }\r\n\r\n        _eas.multiRevoke{ value: msg.value }(multiRequests);\r\n    }\r\n\r\n    /// @dev Verifies delegated attestation request.\r\n    /// @param request The arguments of the delegated attestation request.\r\n    function _verifyAttest(DelegatedProxyAttestationRequest memory request) internal {\r\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\r\n            revert DeadlineExpired();\r\n        }\r\n\r\n        AttestationRequestData memory data = request.data;\r\n        Signature memory signature = request.signature;\r\n\r\n        _verifyUnusedSignature(signature);\r\n\r\n        bytes32 digest = _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    ATTEST_PROXY_TYPEHASH,\r\n                    request.attester,\r\n                    request.schema,\r\n                    data.recipient,\r\n                    data.expirationTime,\r\n                    data.revocable,\r\n                    data.refUID,\r\n                    keccak256(data.data),\r\n                    data.value,\r\n                    request.deadline\r\n                )\r\n            )\r\n        );\r\n\r\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.attester) {\r\n            revert InvalidSignature();\r\n        }\r\n    }\r\n\r\n    /// @dev Verifies delegated revocation request.\r\n    /// @param request The arguments of the delegated revocation request.\r\n    function _verifyRevoke(DelegatedProxyRevocationRequest memory request) internal {\r\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\r\n            revert DeadlineExpired();\r\n        }\r\n\r\n        RevocationRequestData memory data = request.data;\r\n\r\n        // Allow only original attesters to revoke their attestations.\r\n        address attester = _attesters[data.uid];\r\n        if (attester == address(0)) {\r\n            revert NotFound();\r\n        }\r\n\r\n        if (attester != request.revoker) {\r\n            revert AccessDenied();\r\n        }\r\n\r\n        Signature memory signature = request.signature;\r\n\r\n        _verifyUnusedSignature(signature);\r\n\r\n        bytes32 digest = _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    REVOKE_PROXY_TYPEHASH,\r\n                    request.revoker,\r\n                    request.schema,\r\n                    data.uid,\r\n                    data.value,\r\n                    request.deadline\r\n                )\r\n            )\r\n        );\r\n\r\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.revoker) {\r\n            revert InvalidSignature();\r\n        }\r\n    }\r\n\r\n    /// @dev Ensures that the provided EIP712 signature wasn't already used.\r\n    /// @param signature The EIP712 signature data.\r\n    function _verifyUnusedSignature(Signature memory signature) internal {\r\n        bytes memory packedSignature = abi.encodePacked(signature.v, signature.r, signature.s);\r\n\r\n        if (_signatures[packedSignature]) {\r\n            revert UsedSignature();\r\n        }\r\n\r\n        _signatures[packedSignature] = true;\r\n    }\r\n\r\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\r\n    ///     current block time.\r\n    function _time() internal view virtual returns (uint64) {\r\n        return uint64(block.timestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/eip712/proxy/examples/PermissionedEIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// prettier-ignore\r\nimport {\r\n    EIP712Proxy,\r\n    DelegatedProxyAttestationRequest,\r\n    DelegatedProxyRevocationRequest,\r\n    MultiDelegatedProxyAttestationRequest,\r\n    MultiDelegatedProxyRevocationRequest\r\n} from \"../EIP712Proxy.sol\";\r\n\r\nimport { IEAS } from \"../../../IEAS.sol\";\r\n\r\nimport { AccessDenied, uncheckedInc } from \"../../../Common.sol\";\r\n\r\n/// @title PermissionedEIP712Proxy\r\n/// @notice A sample EIP712 proxy that allows only a specific address to attest.\r\ncontract PermissionedEIP712Proxy is EIP712Proxy, Ownable {\r\n    /// @dev Creates a new PermissionedEIP712Proxy instance.\r\n    /// @param eas The address of the global EAS contract.\r\n    /// @param name The user readable name of the signing domain.\r\n    constructor(IEAS eas, string memory name) Ownable(msg.sender) EIP712Proxy(eas, name) {}\r\n\r\n    /// @inheritdoc EIP712Proxy\r\n    function attestByDelegation(\r\n        DelegatedProxyAttestationRequest calldata delegatedRequest\r\n    ) public payable override returns (bytes32) {\r\n        // Ensure that only the owner is allowed to delegate attestations.\r\n        _verifyAttester(delegatedRequest.attester);\r\n\r\n        return super.attestByDelegation(delegatedRequest);\r\n    }\r\n\r\n    /// @inheritdoc EIP712Proxy\r\n    function multiAttestByDelegation(\r\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\r\n    ) public payable override returns (bytes32[] memory) {\r\n        uint256 length = multiDelegatedRequests.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // Ensure that only the owner is allowed to delegate attestations.\r\n            _verifyAttester(multiDelegatedRequests[i].attester);\r\n        }\r\n\r\n        return super.multiAttestByDelegation(multiDelegatedRequests);\r\n    }\r\n\r\n    /// @inheritdoc EIP712Proxy\r\n    function revokeByDelegation(DelegatedProxyRevocationRequest calldata delegatedRequest) public payable override {\r\n        // Ensure that only the owner is allowed to delegate revocations.\r\n        _verifyAttester(delegatedRequest.revoker);\r\n\r\n        super.revokeByDelegation(delegatedRequest);\r\n    }\r\n\r\n    /// @inheritdoc EIP712Proxy\r\n    function multiRevokeByDelegation(\r\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\r\n    ) public payable override {\r\n        uint256 length = multiDelegatedRequests.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // Ensure that only the owner is allowed to delegate revocations.\r\n            _verifyAttester(multiDelegatedRequests[i].revoker);\r\n        }\r\n\r\n        super.multiRevokeByDelegation(multiDelegatedRequests);\r\n    }\r\n\r\n    /// @dev Ensures that only the allowed attester can attest.\r\n    /// @param attester The attester to verify.\r\n    function _verifyAttester(address attester) private view {\r\n        if (attester != owner()) {\r\n            revert AccessDenied();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\r\nimport { ISemver } from \"./ISemver.sol\";\r\nimport { Attestation, Signature } from \"./Common.sol\";\r\n\r\n/// @notice A struct representing the arguments of the attestation request.\r\nstruct AttestationRequestData {\r\n    address recipient; // The recipient of the attestation.\r\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\r\n    bool revocable; // Whether the attestation is revocable.\r\n    bytes32 refUID; // The UID of the related attestation.\r\n    bytes data; // Custom attestation data.\r\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the attestation request.\r\nstruct AttestationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    AttestationRequestData data; // The arguments of the attestation request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the full delegated attestation request.\r\nstruct DelegatedAttestationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    AttestationRequestData data; // The arguments of the attestation request.\r\n    Signature signature; // The ECDSA signature data.\r\n    address attester; // The attesting account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the multi attestation request.\r\nstruct MultiAttestationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    AttestationRequestData[] data; // The arguments of the attestation request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\r\nstruct MultiDelegatedAttestationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    AttestationRequestData[] data; // The arguments of the attestation requests.\r\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\r\n    address attester; // The attesting account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @notice A struct representing the arguments of the revocation request.\r\nstruct RevocationRequestData {\r\n    bytes32 uid; // The UID of the attestation to revoke.\r\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the revocation request.\r\nstruct RevocationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    RevocationRequestData data; // The arguments of the revocation request.\r\n}\r\n\r\n/// @notice A struct representing the arguments of the full delegated revocation request.\r\nstruct DelegatedRevocationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    RevocationRequestData data; // The arguments of the revocation request.\r\n    Signature signature; // The ECDSA signature data.\r\n    address revoker; // The revoking account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the multi revocation request.\r\nstruct MultiRevocationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    RevocationRequestData[] data; // The arguments of the revocation request.\r\n}\r\n\r\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\r\nstruct MultiDelegatedRevocationRequest {\r\n    bytes32 schema; // The unique identifier of the schema.\r\n    RevocationRequestData[] data; // The arguments of the revocation requests.\r\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\r\n    address revoker; // The revoking account.\r\n    uint64 deadline; // The deadline of the signature/request.\r\n}\r\n\r\n/// @title IEAS\r\n/// @notice EAS - Ethereum Attestation Service interface.\r\ninterface IEAS is ISemver {\r\n    /// @notice Emitted when an attestation has been made.\r\n    /// @param recipient The recipient of the attestation.\r\n    /// @param attester The attesting account.\r\n    /// @param uid The UID of the new attestation.\r\n    /// @param schemaUID The UID of the schema.\r\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\r\n\r\n    /// @notice Emitted when an attestation has been revoked.\r\n    /// @param recipient The recipient of the attestation.\r\n    /// @param attester The attesting account.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @param uid The UID the revoked attestation.\r\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\r\n\r\n    /// @notice Emitted when a data has been timestamped.\r\n    /// @param data The data.\r\n    /// @param timestamp The timestamp.\r\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\r\n\r\n    /// @notice Emitted when a data has been revoked.\r\n    /// @param revoker The address of the revoker.\r\n    /// @param data The data.\r\n    /// @param timestamp The timestamp.\r\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\r\n\r\n    /// @notice Returns the address of the global schema registry.\r\n    /// @return The address of the global schema registry.\r\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\r\n\r\n    /// @notice Attests to a specific schema.\r\n    /// @param request The arguments of the attestation request.\r\n    /// @return The UID of the new attestation.\r\n    ///\r\n    /// Example:\r\n    ///     attest({\r\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\r\n    ///         data: {\r\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\r\n    ///             expirationTime: 0,\r\n    ///             revocable: true,\r\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n    ///             data: \"0xF00D\",\r\n    ///             value: 0\r\n    ///         }\r\n    ///     })\r\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\r\n\r\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\r\n    /// @param delegatedRequest The arguments of the delegated attestation request.\r\n    /// @return The UID of the new attestation.\r\n    ///\r\n    /// Example:\r\n    ///     attestByDelegation({\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: {\r\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n    ///             expirationTime: 1673891048,\r\n    ///             revocable: true,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x1234',\r\n    ///             value: 0\r\n    ///         },\r\n    ///         signature: {\r\n    ///             v: 28,\r\n    ///             r: '0x148c...b25b',\r\n    ///             s: '0x5a72...be22'\r\n    ///         },\r\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\r\n    ///         deadline: 1673891048\r\n    ///     })\r\n    function attestByDelegation(\r\n        DelegatedAttestationRequest calldata delegatedRequest\r\n    ) external payable returns (bytes32);\r\n\r\n    /// @notice Attests to multiple schemas.\r\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\r\n    ///     schema ids to benefit from the best batching optimization.\r\n    /// @return The UIDs of the new attestations.\r\n    ///\r\n    /// Example:\r\n    ///     multiAttest([{\r\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\r\n    ///         data: [{\r\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\r\n    ///             expirationTime: 1673891048,\r\n    ///             revocable: true,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x1234',\r\n    ///             value: 1000\r\n    ///         },\r\n    ///         {\r\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n    ///             expirationTime: 0,\r\n    ///             revocable: false,\r\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\r\n    ///             data: '0x00',\r\n    ///             value: 0\r\n    ///         }],\r\n    ///     },\r\n    ///     {\r\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\r\n    ///         data: [{\r\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\r\n    ///             expirationTime: 0,\r\n    ///             revocable: true,\r\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\r\n    ///             data: '0x12345678',\r\n    ///             value: 0\r\n    ///         },\r\n    ///     }])\r\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\r\n\r\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\r\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\r\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\r\n    /// @return The UIDs of the new attestations.\r\n    ///\r\n    /// Example:\r\n    ///     multiAttestByDelegation([{\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: [{\r\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\r\n    ///             expirationTime: 1673891048,\r\n    ///             revocable: true,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x1234',\r\n    ///             value: 0\r\n    ///         },\r\n    ///         {\r\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\r\n    ///             expirationTime: 0,\r\n    ///             revocable: false,\r\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\r\n    ///             data: '0x00',\r\n    ///             value: 0\r\n    ///         }],\r\n    ///         signatures: [{\r\n    ///             v: 28,\r\n    ///             r: '0x148c...b25b',\r\n    ///             s: '0x5a72...be22'\r\n    ///         },\r\n    ///         {\r\n    ///             v: 28,\r\n    ///             r: '0x487s...67bb',\r\n    ///             s: '0x12ad...2366'\r\n    ///         }],\r\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\r\n    ///         deadline: 1673891048\r\n    ///     }])\r\n    function multiAttestByDelegation(\r\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\r\n    ) external payable returns (bytes32[] memory);\r\n\r\n    /// @notice Revokes an existing attestation to a specific schema.\r\n    /// @param request The arguments of the revocation request.\r\n    ///\r\n    /// Example:\r\n    ///     revoke({\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: {\r\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\r\n    ///             value: 0\r\n    ///         }\r\n    ///     })\r\n    function revoke(RevocationRequest calldata request) external payable;\r\n\r\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\r\n    /// @param delegatedRequest The arguments of the delegated revocation request.\r\n    ///\r\n    /// Example:\r\n    ///     revokeByDelegation({\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: {\r\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\r\n    ///             value: 0\r\n    ///         },\r\n    ///         signature: {\r\n    ///             v: 27,\r\n    ///             r: '0xb593...7142',\r\n    ///             s: '0x0f5b...2cce'\r\n    ///         },\r\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\r\n    ///         deadline: 1673891048\r\n    ///     })\r\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\r\n\r\n    /// @notice Revokes existing attestations to multiple schemas.\r\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\r\n    ///     schema ids to benefit from the best batching optimization.\r\n    ///\r\n    /// Example:\r\n    ///     multiRevoke([{\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: [{\r\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\r\n    ///             value: 1000\r\n    ///         },\r\n    ///         {\r\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\r\n    ///             value: 0\r\n    ///         }],\r\n    ///     },\r\n    ///     {\r\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\r\n    ///         data: [{\r\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\r\n    ///             value: 0\r\n    ///         },\r\n    ///     }])\r\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\r\n\r\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\r\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\r\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\r\n    ///\r\n    /// Example:\r\n    ///     multiRevokeByDelegation([{\r\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\r\n    ///         data: [{\r\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\r\n    ///             value: 1000\r\n    ///         },\r\n    ///         {\r\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\r\n    ///             value: 0\r\n    ///         }],\r\n    ///         signatures: [{\r\n    ///             v: 28,\r\n    ///             r: '0x148c...b25b',\r\n    ///             s: '0x5a72...be22'\r\n    ///         },\r\n    ///         {\r\n    ///             v: 28,\r\n    ///             r: '0x487s...67bb',\r\n    ///             s: '0x12ad...2366'\r\n    ///         }],\r\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\r\n    ///         deadline: 1673891048\r\n    ///     }])\r\n    function multiRevokeByDelegation(\r\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\r\n    ) external payable;\r\n\r\n    /// @notice Timestamps the specified bytes32 data.\r\n    /// @param data The data to timestamp.\r\n    /// @return The timestamp the data was timestamped with.\r\n    function timestamp(bytes32 data) external returns (uint64);\r\n\r\n    /// @notice Timestamps the specified multiple bytes32 data.\r\n    /// @param data The data to timestamp.\r\n    /// @return The timestamp the data was timestamped with.\r\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\r\n\r\n    /// @notice Revokes the specified bytes32 data.\r\n    /// @param data The data to timestamp.\r\n    /// @return The timestamp the data was revoked with.\r\n    function revokeOffchain(bytes32 data) external returns (uint64);\r\n\r\n    /// @notice Revokes the specified multiple bytes32 data.\r\n    /// @param data The data to timestamp.\r\n    /// @return The timestamp the data was revoked with.\r\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\r\n\r\n    /// @notice Returns an existing attestation by UID.\r\n    /// @param uid The UID of the attestation to retrieve.\r\n    /// @return The attestation data members.\r\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\r\n\r\n    /// @notice Checks whether an attestation exists.\r\n    /// @param uid The UID of the attestation to retrieve.\r\n    /// @return Whether an attestation exists.\r\n    function isAttestationValid(bytes32 uid) external view returns (bool);\r\n\r\n    /// @notice Returns the timestamp that the specified data was timestamped with.\r\n    /// @param data The data to query.\r\n    /// @return The timestamp the data was timestamped with.\r\n    function getTimestamp(bytes32 data) external view returns (uint64);\r\n\r\n    /// @notice Returns the timestamp that the specified data was timestamped with.\r\n    /// @param data The data to query.\r\n    /// @return The timestamp the data was timestamped with.\r\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\r\n}\r\n"
    },
    "contracts/Indexer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { IEAS, Attestation } from \"./IEAS.sol\";\r\nimport { EMPTY_UID, uncheckedInc } from \"./Common.sol\";\r\nimport { Semver } from \"./Semver.sol\";\r\n\r\n/// @title Indexer\r\n/// @notice Indexing Service for the Ethereum Attestation Service\r\ncontract Indexer is Semver {\r\n    error InvalidEAS();\r\n    error InvalidAttestation();\r\n    error InvalidOffset();\r\n\r\n    /// @notice Emitted when an attestation has been indexed.\r\n    /// @param uid The UID the attestation.\r\n    event Indexed(bytes32 indexed uid);\r\n\r\n    /// A mapping between an account and its received attestations.\r\n    mapping(address account => mapping(bytes32 => bytes32[] uids) receivedAttestations) private _receivedAttestations;\r\n\r\n    // A mapping between an account and its sent attestations.\r\n    mapping(address account => mapping(bytes32 => bytes32[] uids) sentAttestations) private _sentAttestations;\r\n\r\n    // A mapping between a schema, attester, and recipient.\r\n    mapping(bytes32 schemaUID => mapping(address attester => mapping(address recipient => bytes32[] uids)))\r\n        private _schemaAttesterRecipientAttestations;\r\n\r\n    // A mapping between a schema and its attestations.\r\n    mapping(bytes32 schemaUID => bytes32[] uids) private _schemaAttestations;\r\n\r\n    // The global mapping of attestation indexing status.\r\n    mapping(bytes32 attestationUID => bool status) private _indexedAttestations;\r\n\r\n    // The address of the global EAS contract.\r\n    IEAS private immutable _eas;\r\n\r\n    /// @dev Creates a new Indexer instance.\r\n    /// @param eas The address of the global EAS contract.\r\n    constructor(IEAS eas) Semver(1, 3, 0) {\r\n        if (address(eas) == address(0)) {\r\n            revert InvalidEAS();\r\n        }\r\n\r\n        _eas = eas;\r\n    }\r\n\r\n    /// @notice Returns the EAS.\r\n    function getEAS() external view returns (IEAS) {\r\n        return _eas;\r\n    }\r\n\r\n    /// @notice Indexes an existing attestation.\r\n    /// @param attestationUID The UID of the attestation to index.\r\n    function indexAttestation(bytes32 attestationUID) external {\r\n        _indexAttestation(attestationUID);\r\n    }\r\n\r\n    /// @notice Indexes multiple existing attestations.\r\n    /// @param attestationUIDs The UIDs of the attestations to index.\r\n    function indexAttestations(bytes32[] calldata attestationUIDs) external {\r\n        uint256 length = attestationUIDs.length;\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            _indexAttestation(attestationUIDs[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns whether an existing attestation has been already indexed.\r\n    /// @param attestationUID The UID of the attestation to check.\r\n    /// @return Whether an attestation has been already indexed.\r\n    function isAttestationIndexed(bytes32 attestationUID) external view returns (bool) {\r\n        return _indexedAttestations[attestationUID];\r\n    }\r\n\r\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested to/received by a specific\r\n    ///     recipient.\r\n    /// @param recipient The recipient of the attestation.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @param start The offset to start from.\r\n    /// @param length The number of total members to retrieve.\r\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\r\n    /// @return An array of attestation UIDs.\r\n    function getReceivedAttestationUIDs(\r\n        address recipient,\r\n        bytes32 schemaUID,\r\n        uint256 start,\r\n        uint256 length,\r\n        bool reverseOrder\r\n    ) external view returns (bytes32[] memory) {\r\n        return _sliceUIDs(_receivedAttestations[recipient][schemaUID], start, length, reverseOrder);\r\n    }\r\n\r\n    /// @notice Returns the total number of attestations to a specific schema which were attested to/received by a\r\n    ///     specific recipient.\r\n    /// @param recipient The recipient of the attestation.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @return The total number of attestations.\r\n    function getReceivedAttestationUIDCount(address recipient, bytes32 schemaUID) external view returns (uint256) {\r\n        return _receivedAttestations[recipient][schemaUID].length;\r\n    }\r\n\r\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested by a specific attester.\r\n    /// @param attester The attester of the attestation.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @param start The offset to start from.\r\n    /// @param length The number of total members to retrieve.\r\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\r\n    /// @return An array of attestation UIDs.\r\n    function getSentAttestationUIDs(\r\n        address attester,\r\n        bytes32 schemaUID,\r\n        uint256 start,\r\n        uint256 length,\r\n        bool reverseOrder\r\n    ) external view returns (bytes32[] memory) {\r\n        return _sliceUIDs(_sentAttestations[attester][schemaUID], start, length, reverseOrder);\r\n    }\r\n\r\n    /// @notice Returns the total number of attestations to a specific schema which were attested by a specific\r\n    /// attester.\r\n    /// @param attester The attester of the attestation.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @return The total number of attestations.\r\n    function getSentAttestationUIDCount(address attester, bytes32 schemaUID) external view returns (uint256) {\r\n        return _sentAttestations[attester][schemaUID].length;\r\n    }\r\n\r\n    /// @notice Returns the UIDs of attestations to a specific schema which were attested by a specific attester to a\r\n    ///     specific recipient.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @param attester The attester of the attestation.\r\n    /// @param recipient The recipient of the attestation.\r\n    /// @param start The offset to start from.\r\n    /// @param length The number of total members to retrieve.\r\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\r\n    /// @return An array of attestation UIDs.\r\n    function getSchemaAttesterRecipientAttestationUIDs(\r\n        bytes32 schemaUID,\r\n        address attester,\r\n        address recipient,\r\n        uint256 start,\r\n        uint256 length,\r\n        bool reverseOrder\r\n    ) external view returns (bytes32[] memory) {\r\n        return\r\n            _sliceUIDs(\r\n                _schemaAttesterRecipientAttestations[schemaUID][attester][recipient],\r\n                start,\r\n                length,\r\n                reverseOrder\r\n            );\r\n    }\r\n\r\n    /// @notice Returns the total number of UIDs of attestations to a specific schema which were attested by a specific\r\n    ///     attester to a specific recipient.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @param attester The attester of the attestation.\r\n    /// @param recipient The recipient of the attestation.\r\n    /// @return An array of attestation UIDs.\r\n    function getSchemaAttesterRecipientAttestationUIDCount(\r\n        bytes32 schemaUID,\r\n        address attester,\r\n        address recipient\r\n    ) external view returns (uint256) {\r\n        return _schemaAttesterRecipientAttestations[schemaUID][attester][recipient].length;\r\n    }\r\n\r\n    /// @notice Returns the UIDs of attestations to a specific schema.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @param start The offset to start from.\r\n    /// @param length The number of total members to retrieve.\r\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\r\n    /// @return An array of attestation UIDs.\r\n    function getSchemaAttestationUIDs(\r\n        bytes32 schemaUID,\r\n        uint256 start,\r\n        uint256 length,\r\n        bool reverseOrder\r\n    ) external view returns (bytes32[] memory) {\r\n        return _sliceUIDs(_schemaAttestations[schemaUID], start, length, reverseOrder);\r\n    }\r\n\r\n    /// @notice Returns the total number of attestations to a specific schema.\r\n    /// @param schemaUID The UID of the schema.\r\n    /// @return An array of attestation UIDs.\r\n    function getSchemaAttestationUIDCount(bytes32 schemaUID) external view returns (uint256) {\r\n        return _schemaAttestations[schemaUID].length;\r\n    }\r\n\r\n    /// @dev Indexes an existing attestation.\r\n    /// @param attestationUID The UID of the attestation to index.\r\n    function _indexAttestation(bytes32 attestationUID) private {\r\n        // Skip already indexed attestations.\r\n        if (_indexedAttestations[attestationUID]) {\r\n            return;\r\n        }\r\n\r\n        // Check if the attestation exists.\r\n        Attestation memory attestation = _eas.getAttestation(attestationUID);\r\n\r\n        bytes32 uid = attestation.uid;\r\n        if (uid == EMPTY_UID) {\r\n            revert InvalidAttestation();\r\n        }\r\n\r\n        // Index the attestation.\r\n        address attester = attestation.attester;\r\n        address recipient = attestation.recipient;\r\n        bytes32 schemaUID = attestation.schema;\r\n\r\n        _indexedAttestations[attestationUID] = true;\r\n        _schemaAttestations[schemaUID].push(attestationUID);\r\n        _receivedAttestations[recipient][schemaUID].push(attestationUID);\r\n        _sentAttestations[attester][schemaUID].push(attestationUID);\r\n        _schemaAttesterRecipientAttestations[schemaUID][attester][recipient].push(attestationUID);\r\n\r\n        emit Indexed({ uid: uid });\r\n    }\r\n\r\n    /// @dev Returns a slice in an array of attestation UIDs.\r\n    /// @param uids The array of attestation UIDs.\r\n    /// @param start The offset to start from.\r\n    /// @param length The number of total members to retrieve.\r\n    /// @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\r\n    /// @return An array of attestation UIDs.\r\n    function _sliceUIDs(\r\n        bytes32[] memory uids,\r\n        uint256 start,\r\n        uint256 length,\r\n        bool reverseOrder\r\n    ) private pure returns (bytes32[] memory) {\r\n        uint256 attestationsLength = uids.length;\r\n        if (attestationsLength == 0) {\r\n            return new bytes32[](0);\r\n        }\r\n\r\n        if (start >= attestationsLength) {\r\n            revert InvalidOffset();\r\n        }\r\n\r\n        unchecked {\r\n            uint256 len = length;\r\n            if (attestationsLength < start + length) {\r\n                len = attestationsLength - start;\r\n            }\r\n\r\n            bytes32[] memory res = new bytes32[](len);\r\n\r\n            for (uint256 i = 0; i < len; ++i) {\r\n                res[i] = uids[reverseOrder ? attestationsLength - (start + i + 1) : start + i];\r\n            }\r\n\r\n            return res;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport { ISemver } from \"./ISemver.sol\";\r\n\r\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\r\n\r\n/// @notice A struct representing a record for a submitted schema.\r\nstruct SchemaRecord {\r\n    bytes32 uid; // The unique identifier of the schema.\r\n    ISchemaResolver resolver; // Optional schema resolver.\r\n    bool revocable; // Whether the schema allows revocations explicitly.\r\n    string schema; // Custom specification of the schema (e.g., an ABI).\r\n}\r\n\r\n/// @title ISchemaRegistry\r\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\r\ninterface ISchemaRegistry is ISemver {\r\n    /// @notice Emitted when a new schema has been registered\r\n    /// @param uid The schema UID.\r\n    /// @param registerer The address of the account used to register the schema.\r\n    /// @param schema The schema data.\r\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\r\n\r\n    /// @notice Submits and reserves a new schema\r\n    /// @param schema The schema data schema.\r\n    /// @param resolver An optional schema resolver.\r\n    /// @param revocable Whether the schema allows revocations explicitly.\r\n    /// @return The UID of the new schema.\r\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\r\n\r\n    /// @notice Returns an existing schema by UID\r\n    /// @param uid The UID of the schema to retrieve.\r\n    /// @return The schema data members.\r\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\r\n}\r\n"
    },
    "contracts/ISemver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/// @title ISemver\r\n/// @notice A semver interface.\r\ninterface ISemver {\r\n    /// @notice Returns the full semver contract version.\r\n    /// @return Semver contract version as a string.\r\n    function version() external view returns (string memory);\r\n}\r\n"
    },
    "contracts/resolver/examples/AttestationResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title AttestationResolver\r\n/// @notice A sample schema resolver that checks whether an attestations attest to an existing attestation with a\r\n//  specific data field.\r\ncontract AttestationResolver is SchemaResolver {\r\n    error OutOfBounds();\r\n\r\n    bytes32 private constant MAGIC_DATA = \"EA5EA5EA5EA5EA5EA5EA5EA5EA5EA5\";\r\n\r\n    constructor(IEAS eas) SchemaResolver(eas) {}\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\r\n        bytes32 uid = _toBytes32(attestation.data, 0);\r\n        Attestation memory targetAttestation = _eas.getAttestation(uid);\r\n\r\n        // Make sure that the encoded data is an attestation with the magic data.\r\n        return targetAttestation.data.length == MAGIC_DATA.length && bytes32(targetAttestation.data) == MAGIC_DATA;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function toBytes32(bytes memory data, uint256 start) external pure returns (bytes32) {\r\n        return _toBytes32(data, start);\r\n    }\r\n\r\n    function _toBytes32(bytes memory data, uint256 start) private pure returns (bytes32) {\r\n        unchecked {\r\n            if (data.length < start + 32) {\r\n                revert OutOfBounds();\r\n            }\r\n        }\r\n\r\n        bytes32 tempBytes32;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            tempBytes32 := mload(add(add(data, 0x20), start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/AttesterResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title AttesterResolver\r\n/// @notice A sample schema resolver that checks whether the attestation is from a specific attester.\r\ncontract AttesterResolver is SchemaResolver {\r\n    address private immutable _targetAttester;\r\n\r\n    constructor(IEAS eas, address targetAttester) SchemaResolver(eas) {\r\n        _targetAttester = targetAttester;\r\n    }\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\r\n        return attestation.attester == _targetAttester;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/DataResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title DataResolver\r\n/// @notice A sample schema resolver that checks whether an attestation data is either \\x00 or \\x01.\r\ncontract DataResolver is SchemaResolver {\r\n    bytes1 private constant DATA1 = \"\\x00\";\r\n    bytes1 private constant DATA2 = \"\\x01\";\r\n\r\n    constructor(IEAS eas) SchemaResolver(eas) {}\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal pure override returns (bool) {\r\n        // Verifies that the data is either 0 or 1.\r\n        return attestation.data.length == 1 && (attestation.data[0] == DATA1 || attestation.data[0] == DATA2);\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/ExpirationTimeResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title ExpirationTimeResolver\r\n/// @notice A sample schema resolver that checks whether the expiration time is later than a specific timestamp.\r\ncontract ExpirationTimeResolver is SchemaResolver {\r\n    uint256 private immutable _validAfter;\r\n\r\n    constructor(IEAS eas, uint256 validAfter) SchemaResolver(eas) {\r\n        _validAfter = validAfter;\r\n    }\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\r\n        return attestation.expirationTime >= _validAfter;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/PayingResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title PayingResolver\r\n/// @notice A sample schema resolver that pays attesters (and expects the payment to be returned during revocations).\r\ncontract PayingResolver is SchemaResolver {\r\n    using Address for address payable;\r\n\r\n    error InvalidValue();\r\n\r\n    uint256 private immutable _incentive;\r\n\r\n    constructor(IEAS eas, uint256 incentive) SchemaResolver(eas) {\r\n        _incentive = incentive;\r\n    }\r\n\r\n    function isPayable() public pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 value) internal override returns (bool) {\r\n        if (value > 0) {\r\n            return false;\r\n        }\r\n\r\n        payable(attestation.attester).transfer(_incentive);\r\n\r\n        return true;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata attestation, uint256 value) internal override returns (bool) {\r\n        if (value < _incentive) {\r\n            return false;\r\n        }\r\n\r\n        if (value > _incentive) {\r\n            payable(address(attestation.attester)).sendValue(value - _incentive);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/RecipientResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title RecipientResolver\r\n/// @notice A sample schema resolver that checks whether the attestation is to a specific recipient.\r\ncontract RecipientResolver is SchemaResolver {\r\n    address private immutable _targetRecipient;\r\n\r\n    constructor(IEAS eas, address targetRecipient) SchemaResolver(eas) {\r\n        _targetRecipient = targetRecipient;\r\n    }\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\r\n        return attestation.recipient == _targetRecipient;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/RevocationResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title RevocationResolver\r\n/// @notice A sample schema resolver that controls revocations.\r\ncontract RevocationResolver is SchemaResolver {\r\n    bool private _revocation;\r\n\r\n    constructor(IEAS eas) SchemaResolver(eas) {}\r\n\r\n    function setRevocation(bool status) external {\r\n        _revocation = status;\r\n    }\r\n\r\n    function onAttest(Attestation calldata /*attestation)*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal view override returns (bool) {\r\n        return _revocation;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/TokenResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title TokenResolver\r\n/// @notice A sample schema resolver that checks whether a specific amount of tokens was approved to be included in an attestation.\r\ncontract TokenResolver is SchemaResolver {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error InvalidAllowance();\r\n\r\n    IERC20 private immutable _targetToken;\r\n    uint256 private immutable _targetAmount;\r\n\r\n    constructor(IEAS eas, IERC20 targetToken, uint256 targetAmount) SchemaResolver(eas) {\r\n        _targetToken = targetToken;\r\n        _targetAmount = targetAmount;\r\n    }\r\n\r\n    function onAttest(Attestation calldata attestation, uint256 /*value*/) internal view override returns (bool) {\r\n        if (_targetToken.allowance(attestation.attester, address(this)) < _targetAmount) {\r\n            revert InvalidAllowance();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/examples/ValueResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { SchemaResolver } from \"../SchemaResolver.sol\";\r\n\r\nimport { IEAS, Attestation } from \"../../IEAS.sol\";\r\n\r\n/// @title ValueResolver\r\n/// @notice A sample schema resolver that checks whether a specific amount of ETH was sent with an attestation.\r\ncontract ValueResolver is SchemaResolver {\r\n    uint256 private immutable _targetValue;\r\n\r\n    constructor(IEAS eas, uint256 targetValue) SchemaResolver(eas) {\r\n        _targetValue = targetValue;\r\n    }\r\n\r\n    function isPayable() public pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function onAttest(Attestation calldata /*attestation*/, uint256 value) internal view override returns (bool) {\r\n        return value == _targetValue;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport { Attestation } from \"./../Common.sol\";\r\nimport { ISemver } from \"./../ISemver.sol\";\r\n\r\n/// @title ISchemaResolver\r\n/// @notice The interface of an optional schema resolver.\r\ninterface ISchemaResolver is ISemver {\r\n    /// @notice Checks if the resolver can be sent ETH.\r\n    /// @return Whether the resolver supports ETH transfers.\r\n    function isPayable() external pure returns (bool);\r\n\r\n    /// @notice Processes an attestation and verifies whether it's valid.\r\n    /// @param attestation The new attestation.\r\n    /// @return Whether the attestation is valid.\r\n    function attest(Attestation calldata attestation) external payable returns (bool);\r\n\r\n    /// @notice Processes multiple attestations and verifies whether they are valid.\r\n    /// @param attestations The new attestations.\r\n    /// @param values Explicit ETH amounts which were sent with each attestation.\r\n    /// @return Whether all the attestations are valid.\r\n    function multiAttest(\r\n        Attestation[] calldata attestations,\r\n        uint256[] calldata values\r\n    ) external payable returns (bool);\r\n\r\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\r\n    /// @param attestation The existing attestation to be revoked.\r\n    /// @return Whether the attestation can be revoked.\r\n    function revoke(Attestation calldata attestation) external payable returns (bool);\r\n\r\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\r\n    /// @param attestations The existing attestations to be revoked.\r\n    /// @param values Explicit ETH amounts which were sent with each revocation.\r\n    /// @return Whether the attestations can be revoked.\r\n    function multiRevoke(\r\n        Attestation[] calldata attestations,\r\n        uint256[] calldata values\r\n    ) external payable returns (bool);\r\n}\r\n"
    },
    "contracts/resolver/SchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport { AccessDenied, InvalidEAS, InvalidLength, uncheckedInc } from \"./../Common.sol\";\r\nimport { IEAS, Attestation } from \"./../IEAS.sol\";\r\nimport { Semver } from \"./../Semver.sol\";\r\nimport { ISchemaResolver } from \"./ISchemaResolver.sol\";\r\n\r\n/// @title SchemaResolver\r\n/// @notice The base schema resolver contract.\r\nabstract contract SchemaResolver is ISchemaResolver, Semver {\r\n    error InsufficientValue();\r\n    error NotPayable();\r\n\r\n    // The global EAS contract.\r\n    IEAS internal immutable _eas;\r\n\r\n    /// @dev Creates a new resolver.\r\n    /// @param eas The address of the global EAS contract.\r\n    constructor(IEAS eas) Semver(1, 3, 0) {\r\n        if (address(eas) == address(0)) {\r\n            revert InvalidEAS();\r\n        }\r\n\r\n        _eas = eas;\r\n    }\r\n\r\n    /// @dev Ensures that only the EAS contract can make this call.\r\n    modifier onlyEAS() {\r\n        _onlyEAS();\r\n\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc ISchemaResolver\r\n    function isPayable() public pure virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /// @dev ETH callback.\r\n    receive() external payable virtual {\r\n        if (!isPayable()) {\r\n            revert NotPayable();\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc ISchemaResolver\r\n    function attest(Attestation calldata attestation) external payable onlyEAS returns (bool) {\r\n        return onAttest(attestation, msg.value);\r\n    }\r\n\r\n    /// @inheritdoc ISchemaResolver\r\n    function multiAttest(\r\n        Attestation[] calldata attestations,\r\n        uint256[] calldata values\r\n    ) external payable onlyEAS returns (bool) {\r\n        uint256 length = attestations.length;\r\n        if (length != values.length) {\r\n            revert InvalidLength();\r\n        }\r\n\r\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\r\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\r\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\r\n        // possible to send too much ETH anyway.\r\n        uint256 remainingValue = msg.value;\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // Ensure that the attester/revoker doesn't try to spend more than available.\r\n            uint256 value = values[i];\r\n            if (value > remainingValue) {\r\n                revert InsufficientValue();\r\n            }\r\n\r\n            // Forward the attestation to the underlying resolver and return false in case it isn't approved.\r\n            if (!onAttest(attestations[i], value)) {\r\n                return false;\r\n            }\r\n\r\n            unchecked {\r\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\r\n                remainingValue -= value;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc ISchemaResolver\r\n    function revoke(Attestation calldata attestation) external payable onlyEAS returns (bool) {\r\n        return onRevoke(attestation, msg.value);\r\n    }\r\n\r\n    /// @inheritdoc ISchemaResolver\r\n    function multiRevoke(\r\n        Attestation[] calldata attestations,\r\n        uint256[] calldata values\r\n    ) external payable onlyEAS returns (bool) {\r\n        uint256 length = attestations.length;\r\n        if (length != values.length) {\r\n            revert InvalidLength();\r\n        }\r\n\r\n        // We are keeping track of the remaining ETH amount that can be sent to resolvers and will keep deducting\r\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\r\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\r\n        // possible to send too much ETH anyway.\r\n        uint256 remainingValue = msg.value;\r\n\r\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\r\n            // Ensure that the attester/revoker doesn't try to spend more than available.\r\n            uint256 value = values[i];\r\n            if (value > remainingValue) {\r\n                revert InsufficientValue();\r\n            }\r\n\r\n            // Forward the revocation to the underlying resolver and return false in case it isn't approved.\r\n            if (!onRevoke(attestations[i], value)) {\r\n                return false;\r\n            }\r\n\r\n            unchecked {\r\n                // Subtract the ETH amount, that was provided to this attestation, from the global remaining ETH amount.\r\n                remainingValue -= value;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice A resolver callback that should be implemented by child contracts.\r\n    /// @param attestation The new attestation.\r\n    /// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\r\n    ///     both attest() and multiAttest() callbacks EAS-only callbacks and that in case of multi attestations, it'll\r\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\r\n    ///     attestations in the batch.\r\n    /// @return Whether the attestation is valid.\r\n    function onAttest(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\r\n\r\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\r\n    /// @param attestation The existing attestation to be revoked.\r\n    /// @param value An explicit ETH amount that was sent to the resolver. Please note that this value is verified in\r\n    ///     both revoke() and multiRevoke() callbacks EAS-only callbacks and that in case of multi attestations, it'll\r\n    ///     usually hold that msg.value != value, since msg.value aggregated the sent ETH amounts for all the\r\n    ///     attestations in the batch.\r\n    /// @return Whether the attestation can be revoked.\r\n    function onRevoke(Attestation calldata attestation, uint256 value) internal virtual returns (bool);\r\n\r\n    /// @dev Ensures that only the EAS contract can make this call.\r\n    function _onlyEAS() private view {\r\n        if (msg.sender != address(_eas)) {\r\n            revert AccessDenied();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/SchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\r\n\r\nimport { EMPTY_UID } from \"./Common.sol\";\r\nimport { Semver } from \"./Semver.sol\";\r\nimport { ISchemaRegistry, SchemaRecord } from \"./ISchemaRegistry.sol\";\r\n\r\n/// @title SchemaRegistry\r\n/// @notice The global schema registry.\r\ncontract SchemaRegistry is ISchemaRegistry, Semver {\r\n    error AlreadyExists();\r\n\r\n    // The global mapping between schema records and their IDs.\r\n    mapping(bytes32 uid => SchemaRecord schemaRecord) private _registry;\r\n\r\n    /// @dev Creates a new SchemaRegistry instance.\r\n    constructor() Semver(1, 3, 0) {}\r\n\r\n    /// @inheritdoc ISchemaRegistry\r\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32) {\r\n        SchemaRecord memory schemaRecord = SchemaRecord({\r\n            uid: EMPTY_UID,\r\n            schema: schema,\r\n            resolver: resolver,\r\n            revocable: revocable\r\n        });\r\n\r\n        bytes32 uid = _getUID(schemaRecord);\r\n        if (_registry[uid].uid != EMPTY_UID) {\r\n            revert AlreadyExists();\r\n        }\r\n\r\n        schemaRecord.uid = uid;\r\n        _registry[uid] = schemaRecord;\r\n\r\n        emit Registered(uid, msg.sender, schemaRecord);\r\n\r\n        return uid;\r\n    }\r\n\r\n    /// @inheritdoc ISchemaRegistry\r\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory) {\r\n        return _registry[uid];\r\n    }\r\n\r\n    /// @dev Calculates a UID for a given schema.\r\n    /// @param schemaRecord The input schema.\r\n    /// @return schema UID.\r\n    function _getUID(SchemaRecord memory schemaRecord) private pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(schemaRecord.schema, schemaRecord.resolver, schemaRecord.revocable));\r\n    }\r\n}\r\n"
    },
    "contracts/Semver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\nimport { ISemver } from \"./ISemver.sol\";\r\n\r\n/// @title Semver\r\n/// @notice A simple contract for managing contract versions.\r\ncontract Semver is ISemver {\r\n    // Contract's major version number.\r\n    uint256 private immutable _major;\r\n\r\n    // Contract's minor version number.\r\n    uint256 private immutable _minor;\r\n\r\n    // Contract's patch version number.\r\n    uint256 private immutable _patch;\r\n\r\n    /// @dev Create a new Semver instance.\r\n    /// @param major Major version number.\r\n    /// @param minor Minor version number.\r\n    /// @param patch Patch version number.\r\n    constructor(uint256 major, uint256 minor, uint256 patch) {\r\n        _major = major;\r\n        _minor = minor;\r\n        _patch = patch;\r\n    }\r\n\r\n    /// @notice Returns the full semver contract version.\r\n    /// @return Semver contract version as a string.\r\n    function version() external view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(Strings.toString(_major), \".\", Strings.toString(_minor), \".\", Strings.toString(_patch))\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/tests/eip1271/TestEIP1271Signer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { IERC1271 } from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\r\n\r\ncontract TestEIP1271Signer is IERC1271 {\r\n    bytes4 private constant EIP1271_INVALID_MAGIC_VALUE = 0xffffffff;\r\n\r\n    mapping(bytes32 hash => bytes signature) private _validSignatures;\r\n\r\n    function mockSignature(bytes32 hash, bytes calldata signature) external {\r\n        _validSignatures[hash] = signature;\r\n    }\r\n\r\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue) {\r\n        bytes memory storedSignature = _validSignatures[hash];\r\n        if (storedSignature.length == signature.length && keccak256(storedSignature) == keccak256(signature)) {\r\n            return IERC1271.isValidSignature.selector;\r\n        }\r\n\r\n        return EIP1271_INVALID_MAGIC_VALUE;\r\n    }\r\n}\r\n"
    },
    "contracts/tests/eip1271/TestEIP1271Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { EIP1271Verifier } from \"../../eip1271/EIP1271Verifier.sol\";\r\nimport { DelegatedAttestationRequest, DelegatedRevocationRequest } from \"../../IEAS.sol\";\r\nimport { Semver } from \"../../Semver.sol\";\r\n\r\ncontract TestEIP1271Verifier is Semver, EIP1271Verifier {\r\n    constructor(string memory name) Semver(1, 3, 0) EIP1271Verifier(name, \"1.3.0\") {}\r\n\r\n    function verifyAttest(DelegatedAttestationRequest memory request) external {\r\n        _verifyAttest(request);\r\n    }\r\n\r\n    function verifyRevoke(DelegatedRevocationRequest memory request) external {\r\n        _verifyRevoke(request);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/eip712/proxy/TestEIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { IEAS } from \"../../../IEAS.sol\";\r\nimport { EIP712Proxy, DelegatedProxyAttestationRequest, DelegatedProxyRevocationRequest } from \"../../../eip712/proxy/EIP712Proxy.sol\";\r\n\r\ncontract TestEIP712Proxy is EIP712Proxy {\r\n    constructor(IEAS eas, string memory name) EIP712Proxy(eas, name) {}\r\n\r\n    function verifyAttest(DelegatedProxyAttestationRequest memory request) external {\r\n        _verifyAttest(request);\r\n    }\r\n\r\n    function verifyRevoke(DelegatedProxyRevocationRequest memory request) external {\r\n        _verifyRevoke(request);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TestEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { EAS } from \"../EAS.sol\";\r\n\r\nimport { ISchemaRegistry } from \"../ISchemaRegistry.sol\";\r\n\r\ncontract TestEAS is EAS {\r\n    uint64 private constant INITIAL_TIME = 0;\r\n\r\n    uint64 private _currentTime = INITIAL_TIME;\r\n\r\n    constructor(ISchemaRegistry registry) EAS(registry) {}\r\n\r\n    function setTime(uint64 newTime) external {\r\n        _currentTime = newTime;\r\n    }\r\n\r\n    function getTime() external view returns (uint64) {\r\n        return _time();\r\n    }\r\n\r\n    function _time() internal view override returns (uint64) {\r\n        return _currentTime == INITIAL_TIME ? super._time() : _currentTime;\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TestERC20Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract TestERC20Token is ERC20 {\r\n    constructor(string memory name, string memory symbol, uint256 totalSupply) ERC20(name, symbol) {\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n}\r\n"
    },
    "contracts/tests/TestSchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.27;\r\n\r\nimport { IEAS, Attestation } from \"./../IEAS.sol\";\r\nimport { SchemaResolver } from \"./../resolver/SchemaResolver.sol\";\r\n\r\ncontract TestSchemaResolver is SchemaResolver {\r\n    constructor(IEAS eas) SchemaResolver(eas) {}\r\n\r\n    function onAttest(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    function onRevoke(Attestation calldata /*attestation*/, uint256 /*value*/) internal pure override returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "evmVersion": "paris",
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}