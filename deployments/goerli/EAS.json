{
  "address": "0x8BAD0f3ba831aB34dd8110B641D29ecc221ac240",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IASRegistry",
          "name": "registry",
          "type": "address"
        },
        {
          "internalType": "contract IEIP712Verifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRevoked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAttestation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExpirationTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOffset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSchema",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVerifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        }
      ],
      "name": "Attested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        }
      ],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "expirationTime",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "refUUID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "expirationTime",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "refUUID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "attestByDelegation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getASRegistry",
      "outputs": [
        {
          "internalType": "contract IASRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "getAttestation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uuid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "refUUID",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "time",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "expirationTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "revocationTime",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEIP712Verifier",
      "outputs": [
        {
          "internalType": "contract IEIP712Verifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "isAttestationValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "revokeByDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8a13eb41d4bbf17540d8f7afb262e86787c1ed117bd8896b13c2921040379c6",
  "receipt": {
    "to": null,
    "from": "0x01a93612f26100B6E18a2e3dd57df5c3ccaFeca1",
    "contractAddress": "0x8BAD0f3ba831aB34dd8110B641D29ecc221ac240",
    "transactionIndex": 0,
    "gasUsed": "1287676",
    "logsBloom": "0x
    "blockHash": "0x6f977a16cf8f1fc0af9e924792ff05637e30ec4792f3ee068387efa79ba0df28",
    "transactionHash": "0xd8a13eb41d4bbf17540d8f7afb262e86787c1ed117bd8896b13c2921040379c6",
    "logs": [],
    "blockNumber": 7705601,
    "cumulativeGasUsed": "1287676",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7b24C7f8AF365B4E308b6acb0A7dfc85d034Cb3f",
    "0x1a5650D0EcbCa349DD84bAFa85790E3e6955eb84"
  ],
  "numDeployments": 1,
  "solcInputHash": "3d7214a23a94ba3c1d0721cea36f8c55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IASRegistry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IEIP712Verifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAttestation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpirationTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSchema\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"refUUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"refUUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"attestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getASRegistry\",\"outputs\":[{\"internalType\":\"contract IASRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"refUUID\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"revocationTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEIP712Verifier\",\"outputs\":[{\"internalType\":\"contract IEIP712Verifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"isAttestationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"revokeByDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest(address,bytes32,uint32,bytes32,bytes)\":{\"details\":\"Attests to a specific AS.\",\"params\":{\"data\":\"Additional custom data.\",\"expirationTime\":\"The expiration time of the attestation.\",\"recipient\":\"The recipient of the attestation.\",\"refUUID\":\"An optional related attestation's UUID.\",\"schema\":\"The UUID of the AS.\"},\"returns\":{\"_0\":\"The UUID of the new attestation.\"}},\"attestByDelegation(address,bytes32,uint32,bytes32,bytes,address,uint8,bytes32,bytes32)\":{\"details\":\"Attests to a specific AS using a provided EIP712 signature.\",\"params\":{\"attester\":\"The attesting account.\",\"data\":\"Additional custom data.\",\"expirationTime\":\"The expiration time of the attestation.\",\"r\":\"The x-coordinate of the nonce R.\",\"recipient\":\"The recipient of the attestation.\",\"refUUID\":\"An optional related attestation's UUID.\",\"s\":\"The signature data.\",\"schema\":\"The UUID of the AS.\",\"v\":\"The recovery ID.\"},\"returns\":{\"_0\":\"The UUID of the new attestation.\"}},\"constructor\":{\"details\":\"Creates a new EAS instance.\",\"params\":{\"registry\":\"The address of the global AS registry.\",\"verifier\":\"The address of the EIP712 verifier.\"}},\"getASRegistry()\":{\"details\":\"Returns the address of the AS global registry.\",\"returns\":{\"_0\":\"The address of the AS global registry.\"}},\"getAttestation(bytes32)\":{\"details\":\"Returns an existing attestation by UUID.\",\"params\":{\"uuid\":\"The UUID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"The attestation data members.\"}},\"getEIP712Verifier()\":{\"details\":\"Returns the address of the EIP712 verifier used to verify signed attestations.\",\"returns\":{\"_0\":\"The address of the EIP712 verifier used to verify signed attestations.\"}},\"isAttestationValid(bytes32)\":{\"details\":\"Checks whether an attestation exists.\",\"params\":{\"uuid\":\"The UUID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"Whether an attestation exists.\"}},\"revoke(bytes32)\":{\"details\":\"Revokes an existing attestation to a specific AS.\",\"params\":{\"uuid\":\"The UUID of the attestation to revoke.\"}},\"revokeByDelegation(bytes32,address,uint8,bytes32,bytes32)\":{\"details\":\"Attests to a specific AS using a provided EIP712 signature.\",\"params\":{\"attester\":\"The attesting account.\",\"r\":\"The x-coordinate of the nonce R.\",\"s\":\"The signature data.\",\"uuid\":\"The UUID of the attestation to revoke.\",\"v\":\"The recovery ID.\"}}},\"title\":\"EAS - Ethereum Attestation Service\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EAS.sol\":\"EAS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/EAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { EMPTY_UUID } from \\\"./Types.sol\\\";\\nimport { IEAS, Attestation } from \\\"./IEAS.sol\\\";\\nimport { IASRegistry, ASRecord } from \\\"./IASRegistry.sol\\\";\\nimport { IEIP712Verifier } from \\\"./IEIP712Verifier.sol\\\";\\nimport { IASResolver } from \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title EAS - Ethereum Attestation Service\\n */\\ncontract EAS is IEAS {\\n    error AccessDenied();\\n    error AlreadyRevoked();\\n    error InvalidAttestation();\\n    error InvalidExpirationTime();\\n    error InvalidOffset();\\n    error InvalidRegistry();\\n    error InvalidSchema();\\n    error InvalidVerifier();\\n    error NotFound();\\n    error NotPayable();\\n\\n    string public constant VERSION = \\\"0.10\\\";\\n\\n    // The AS global registry.\\n    IASRegistry private immutable _asRegistry;\\n\\n    // The EIP712 verifier used to verify signed attestations.\\n    IEIP712Verifier private immutable _eip712Verifier;\\n\\n    // The global mapping between attestations and their UUIDs.\\n    mapping(bytes32 => Attestation) private _db;\\n\\n    /**\\n     * @dev Creates a new EAS instance.\\n     *\\n     * @param registry The address of the global AS registry.\\n     * @param verifier The address of the EIP712 verifier.\\n     */\\n    constructor(IASRegistry registry, IEIP712Verifier verifier) {\\n        if (address(registry) == address(0x0)) {\\n            revert InvalidRegistry();\\n        }\\n\\n        if (address(verifier) == address(0x0)) {\\n            revert InvalidVerifier();\\n        }\\n\\n        _asRegistry = registry;\\n        _eip712Verifier = verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getASRegistry() external view returns (IASRegistry) {\\n        return _asRegistry;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getEIP712Verifier() external view returns (IEIP712Verifier) {\\n        return _eip712Verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint32 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) public payable virtual returns (bytes32) {\\n        return _attest(recipient, schema, expirationTime, refUUID, data, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint32 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual returns (bytes32) {\\n        _eip712Verifier.attest(recipient, schema, expirationTime, refUUID, data, attester, v, r, s);\\n\\n        return _attest(recipient, schema, expirationTime, refUUID, data, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revoke(bytes32 uuid) public virtual {\\n        return _revoke(uuid, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        _eip712Verifier.revoke(uuid, attester, v, r, s);\\n\\n        _revoke(uuid, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestation(bytes32 uuid) external view returns (Attestation memory) {\\n        return _db[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationValid(bytes32 uuid) public view returns (bool) {\\n        return _db[uuid].uuid != 0;\\n    }\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation (0 represents no expiration).\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function _attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint32 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester\\n    ) private returns (bytes32) {\\n        if (expirationTime != 0 && expirationTime <= _time()) {\\n            revert InvalidExpirationTime();\\n        }\\n\\n        ASRecord memory asRecord = _asRegistry.getAS(schema);\\n        if (asRecord.uuid == EMPTY_UUID) {\\n            revert InvalidSchema();\\n        }\\n\\n        IASResolver resolver = asRecord.resolver;\\n        if (address(resolver) != address(0x0)) {\\n            if (msg.value != 0 && !resolver.isPayable()) {\\n                revert NotPayable();\\n            }\\n\\n            if (!resolver.resolve{ value: msg.value }(recipient, asRecord.schema, data, expirationTime, attester)) {\\n                revert InvalidAttestation();\\n            }\\n        }\\n\\n        Attestation memory attestation = Attestation({\\n            uuid: EMPTY_UUID,\\n            schema: schema,\\n            refUUID: refUUID,\\n            time: _time(),\\n            expirationTime: expirationTime,\\n            revocationTime: 0,\\n            recipient: recipient,\\n            attester: attester,\\n            data: data\\n        });\\n\\n        // Look for the first non-existing UUID (and use a bump seed/nonce in the rare case of a conflict).\\n        bytes32 uuid;\\n        uint32 bump = 0;\\n        while (true) {\\n            uuid = _getUUID(attestation, bump);\\n            if (_db[uuid].uuid == EMPTY_UUID) {\\n                break;\\n            }\\n\\n            unchecked {\\n                ++bump;\\n            }\\n        }\\n        attestation.uuid = uuid;\\n\\n        _db[uuid] = attestation;\\n\\n        if (refUUID != 0) {\\n            if (!isAttestationValid(refUUID)) {\\n                revert NotFound();\\n            }\\n        }\\n\\n        emit Attested(recipient, attester, uuid, schema);\\n\\n        return uuid;\\n    }\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     */\\n    function _revoke(bytes32 uuid, address attester) private {\\n        Attestation storage attestation = _db[uuid];\\n        if (attestation.uuid == EMPTY_UUID) {\\n            revert NotFound();\\n        }\\n\\n        if (attestation.attester != attester) {\\n            revert AccessDenied();\\n        }\\n\\n        if (attestation.revocationTime != 0) {\\n            revert AlreadyRevoked();\\n        }\\n\\n        attestation.revocationTime = _time();\\n\\n        emit Revoked(attestation.recipient, attester, uuid, attestation.schema);\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given attestation.\\n     *\\n     * @param attestation The input attestation.\\n     * @param bump A bump value to use in case of a UUID conflict.\\n     *\\n     * @return Attestation UUID.\\n     */\\n    function _getUUID(Attestation memory attestation, uint32 bump) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    attestation.schema,\\n                    attestation.recipient,\\n                    attestation.attester,\\n                    attestation.time,\\n                    attestation.expirationTime,\\n                    attestation.data,\\n                    bump\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the current's block timestamp.\\n     */\\n    function _time() internal view virtual returns (uint32) {\\n        return uint32(block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xf7476104820b361c7fc8eed64c7f64a437e25d4d08808772874998b47a08f815\",\"license\":\"MIT\"},\"contracts/IASRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IASResolver } from \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted AS (Attestation Schema).\\n */\\nstruct ASRecord {\\n    // A unique identifier of the AS.\\n    bytes32 uuid;\\n    // Optional schema resolver.\\n    IASResolver resolver;\\n    // Auto-incrementing index for reference, assigned by the registry itself.\\n    uint256 index;\\n    // Custom specification of the AS (e.g., an ABI).\\n    bytes schema;\\n}\\n\\n/**\\n * @title The global AS registry interface.\\n */\\ninterface IASRegistry {\\n    /**\\n     * @dev Triggered when a new AS has been registered\\n     *\\n     * @param uuid The AS UUID.\\n     * @param index The AS index.\\n     * @param schema The AS schema.\\n     * @param resolver An optional AS schema resolver.\\n     * @param attester The address of the account used to register the AS.\\n     */\\n    event Registered(bytes32 indexed uuid, uint256 indexed index, bytes schema, IASResolver resolver, address attester);\\n\\n    /**\\n     * @dev Submits and reserve a new AS\\n     *\\n     * @param schema The AS data schema.\\n     * @param resolver An optional AS schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, IASResolver resolver) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing AS by UUID\\n     *\\n     * @param uuid The UUID of the AS to retrieve.\\n     *\\n     * @return The AS data members.\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getASCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e7d2c8cdfac957f5e77a68a8c0dce20b13b97d3d3e37766fa604c41457386c1\",\"license\":\"MIT\"},\"contracts/IASResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title The interface of an optional AS resolver.\\n */\\ninterface IASResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The AS data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint32 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x3cd2e7df7d2c2c89b23d0cf85148e36384cced327f214ea266fa5217fad88e48\",\"license\":\"MIT\"},\"contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IASRegistry } from \\\"./IASRegistry.sol\\\";\\nimport { IEIP712Verifier } from \\\"./IEIP712Verifier.sol\\\";\\n\\n/**\\n * @dev A struct representing a single attestation.\\n */\\nstruct Attestation {\\n    // A unique identifier of the attestation.\\n    bytes32 uuid;\\n    // A unique identifier of the AS.\\n    bytes32 schema;\\n    // The UUID of the related attestation.\\n    bytes32 refUUID;\\n    // The time when the attestation was created (Unix timestamp).\\n    uint32 time;\\n    // The time when the attestation expires (Unix timestamp).\\n    uint32 expirationTime;\\n    // The time when the attestation was revoked (Unix timestamp).\\n    uint32 revocationTime;\\n    // The recipient of the attestation.\\n    address recipient;\\n    // The attester/sender of the attestation.\\n    address attester;\\n    // Custom attestation data.\\n    bytes data;\\n}\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface\\n */\\ninterface IEAS {\\n    /**\\n     * @dev Triggered when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uuid The UUID the revoked attestation.\\n     * @param schema The UUID of the AS.\\n     */\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uuid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Triggered when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param uuid The UUID the revoked attestation.\\n     */\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uuid, bytes32 indexed schema);\\n\\n    /**\\n     * @dev Returns the address of the AS global registry.\\n     *\\n     * @return The address of the AS global registry.\\n     */\\n    function getASRegistry() external view returns (IASRegistry);\\n\\n    /**\\n     * @dev Returns the address of the EIP712 verifier used to verify signed attestations.\\n     *\\n     * @return The address of the EIP712 verifier used to verify signed attestations.\\n     */\\n    function getEIP712Verifier() external view returns (IEIP712Verifier);\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint32 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint32 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     */\\n    function revoke(bytes32 uuid) external;\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns an existing attestation by UUID.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uuid) external view returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uuid) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7fb5a972332c7d341731defe7f874252867a58974b65802fabbc262dfc4c314c\",\"license\":\"MIT\"},\"contracts/IEIP712Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title EIP712 typed signatures verifier for EAS delegated attestations interface.\\n */\\ninterface IEIP712Verifier {\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signatures for attest, and revoke.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the current nonce per-account.\\n     *\\n     * @param account The requested account.\\n     *\\n     * @return The current nonce.\\n     */\\n    function getNonce(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Verifies signed attestation.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint32 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Verifies signed revocations.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revoke(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa2c9da80cd672fca13f7bbe8940b494139001fa8e985802642c78b61130d9154\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0xc3004382d564d0a80a41b11c26adc527324525447842c6b349b32c08fbab747d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001790380380620017908339810160408190526200003491620000b5565b6001600160a01b0382166200005c576040516311a1e69760e01b815260040160405180910390fd5b6001600160a01b038116620000845760405163baa3de5f60e01b815260040160405180910390fd5b6001600160a01b039182166080521660a052620000f4565b6001600160a01b0381168114620000b257600080fd5b50565b60008060408385031215620000c957600080fd5b8251620000d6816200009c565b6020840151909250620000e9816200009c565b809150509250929050565b60805160a0516116626200012e6000396000818160aa01528181610448015261054f015260008181610124015261064801526116626000f3fe6080604052600436106100965760003560e01c8063ae0791d211610069578063d87647b21161004e578063d87647b2146101aa578063e30bb563146101ca578063ffa1ad741461020957600080fd5b8063ae0791d214610175578063b75c7dc61461018857600080fd5b806315cd31a11461009b5780634bfd5bf1146100f457806381fa6cd314610115578063a3112a6414610148575b600080fd5b3480156100a757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610107610102366004610e06565b61025f565b6040519081526020016100eb565b34801561012157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100ca565b34801561015457600080fd5b50610168610163366004610e80565b61027b565b6040516100eb9190610f07565b610107610183366004610fe2565b610408565b34801561019457600080fd5b506101a86101a3366004610e80565b6104df565b005b3480156101b657600080fd5b506101a86101c5366004611093565b6104ec565b3480156101d657600080fd5b506101f96101e5366004610e80565b600090815260208190526040902054151590565b60405190151581526020016100eb565b34801561021557600080fd5b506102526040518060400160405280600481526020017f302e31300000000000000000000000000000000000000000000000000000000081525081565b6040516100eb91906110e3565b6000610270878787878787336105bc565b979650505050505050565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201929092526101008101919091526000828152602081815260409182902082516101208101845281548152600182015492810192909252600281015492820192909252600382015463ffffffff80821660608401526401000000008204811660808401526801000000000000000082041660a083015273ffffffffffffffffffffffffffffffffffffffff6c01000000000000000000000000909104811660c083015260048301541660e08201526005820180549192916101008401919061037f906110fd565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906110fd565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050815250509050919050565b6040517fa182e38c00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a182e38c9061048f908e908e908e908e908e908e908e908e908e908e90600401611199565b600060405180830381600087803b1580156104a957600080fd5b505af11580156104bd573d6000803e3d6000fd5b505050506104d08b8b8b8b8b8b8b6105bc565b9b9a5050505050505050505050565b6104e98133610b97565b50565b6040517f1863f01d0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff858116602483015260ff8516604483015260648201849052608482018390527f00000000000000000000000000000000000000000000000000000000000000001690631863f01d9060a401600060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505050506105b58585610b97565b5050505050565b600063ffffffff8616158015906105df57504263ffffffff168663ffffffff1611155b15610616576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f72487d52000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906372487d5290602401600060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106ea91908101906112b7565b8051909150610725576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602081015173ffffffffffffffffffffffffffffffffffffffff8116156108b95734158015906107c157508073ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf91906113bd565b155b156107f8576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16631bca4420348c85606001518a8a8e8b6040518863ffffffff1660e01b8152600401610840969594939291906113df565b60206040518083038185885af115801561085e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061088391906113bd565b6108b9576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061012001604052806000801b81526020018b81526020018981526020016108e34290565b63ffffffff1681526020018a63ffffffff168152602001600063ffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091508190505b6109898382610d2c565b600081815260208190526040902054909250156109a85760010161097f565b81835260008281526020818152604091829020855181559085015160018201559084015160028201556060840151600382018054608087015160a088015160c089015163ffffffff9586167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090941693909317640100000000928616929092029190911767ffffffffffffffff166801000000000000000094909116939093026bffffffffffffffffffffffff16929092176c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9384160217905560e08501516004830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919092161790556101008401518491906005820190610ad09082611493565b50508a159050610b1f5760008a815260208190526040902054610b1f576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b8773ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b3585604051610b7f91815260200190565b60405180910390a4509b9a5050505050505050505050565b60008281526020819052604090208054610bdd576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600481015473ffffffffffffffffffffffffffffffffffffffff838116911614610c33576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015468010000000000000000900463ffffffff1615610c81576040517f905e710700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff42160217908190556001820154604080518681529051919273ffffffffffffffffffffffffffffffffffffffff868116936c0100000000000000000000000090920416917ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615919081900360200190a4505050565b600082602001518360c001518460e001518560600151866080015187610100015187604051602001610d6497969594939291906115ad565b60405160208183030381529060405280519060200120905092915050565b73ffffffffffffffffffffffffffffffffffffffff811681146104e957600080fd5b803563ffffffff81168114610db857600080fd5b919050565b60008083601f840112610dcf57600080fd5b50813567ffffffffffffffff811115610de757600080fd5b602083019150836020828501011115610dff57600080fd5b9250929050565b60008060008060008060a08789031215610e1f57600080fd5b8635610e2a81610d82565b955060208701359450610e3f60408801610da4565b935060608701359250608087013567ffffffffffffffff811115610e6257600080fd5b610e6e89828a01610dbd565b979a9699509497509295939492505050565b600060208284031215610e9257600080fd5b5035919050565b60005b83811015610eb4578181015183820152602001610e9c565b50506000910152565b60008151808452610ed5816020860160208601610e99565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815281516020820152602082015160408201526040820151606082015260006060830151610f3f608084018263ffffffff169052565b50608083015163ffffffff811660a08401525060a083015163ffffffff811660c08401525060c083015173ffffffffffffffffffffffffffffffffffffffff811660e08401525060e0830151610100610faf8185018373ffffffffffffffffffffffffffffffffffffffff169052565b840151610120848101529050610fc9610140840182610ebd565b949350505050565b803560ff81168114610db857600080fd5b6000806000806000806000806000806101208b8d03121561100257600080fd5b8a3561100d81610d82565b995060208b0135985061102260408c01610da4565b975060608b0135965060808b013567ffffffffffffffff81111561104557600080fd5b6110518d828e01610dbd565b90975095505060a08b013561106581610d82565b935061107360c08c01610fd1565b925060e08b013591506101008b013590509295989b9194979a5092959850565b600080600080600060a086880312156110ab57600080fd5b8535945060208601356110bd81610d82565b93506110cb60408701610fd1565b94979396509394606081013594506080013592915050565b6020815260006110f66020830184610ebd565b9392505050565b600181811c9082168061111157607f821691505b60208210810361114a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600061012073ffffffffffffffffffffffffffffffffffffffff808e1684528c602085015263ffffffff8c1660408501528a60608501528160808501526111e38285018a8c611150565b971660a0840152505060ff9390931660c084015260e0830191909152610100909101529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561126257611262611210565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156112af576112af611210565b604052919050565b600060208083850312156112ca57600080fd5b825167ffffffffffffffff808211156112e257600080fd5b90840190608082870312156112f657600080fd5b6112fe61123f565b825181528383015161130f81610d82565b818501526040838101519082015260608301518281111561132f57600080fd5b80840193505086601f84011261134457600080fd5b82518281111561135657611356611210565b611386857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611268565b9250808352878582860101111561139c57600080fd5b6113ab81868501878701610e99565b50606081019190915295945050505050565b6000602082840312156113cf57600080fd5b815180151581146110f657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff808916835260a0602084015261140f60a0840189610ebd565b838103604085015261142281888a611150565b63ffffffff969096166060850152509290921660809091015250949350505050565b601f82111561148e57600081815260208120601f850160051c8101602086101561146b5750805b601f850160051c820191505b8181101561148a57828155600101611477565b5050505b505050565b815167ffffffffffffffff8111156114ad576114ad611210565b6114c1816114bb84546110fd565b84611444565b602080601f83116001811461151457600084156114de5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561148a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561156157888601518255948401946001909101908401611542565b508582101561159d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b87815260007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808960601b166020840152808860601b166034840152507fffffffff00000000000000000000000000000000000000000000000000000000808760e01b166048840152808660e01b16604c8401528451611634816050860160208901610e99565b60e09490941b1691909201605081019190915260540197965050505050505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c8063ae0791d211610069578063d87647b21161004e578063d87647b2146101aa578063e30bb563146101ca578063ffa1ad741461020957600080fd5b8063ae0791d214610175578063b75c7dc61461018857600080fd5b806315cd31a11461009b5780634bfd5bf1146100f457806381fa6cd314610115578063a3112a6414610148575b600080fd5b3480156100a757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610107610102366004610e06565b61025f565b6040519081526020016100eb565b34801561012157600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100ca565b34801561015457600080fd5b50610168610163366004610e80565b61027b565b6040516100eb9190610f07565b610107610183366004610fe2565b610408565b34801561019457600080fd5b506101a86101a3366004610e80565b6104df565b005b3480156101b657600080fd5b506101a86101c5366004611093565b6104ec565b3480156101d657600080fd5b506101f96101e5366004610e80565b600090815260208190526040902054151590565b60405190151581526020016100eb565b34801561021557600080fd5b506102526040518060400160405280600481526020017f302e31300000000000000000000000000000000000000000000000000000000081525081565b6040516100eb91906110e3565b6000610270878787878787336105bc565b979650505050505050565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201929092526101008101919091526000828152602081815260409182902082516101208101845281548152600182015492810192909252600281015492820192909252600382015463ffffffff80821660608401526401000000008204811660808401526801000000000000000082041660a083015273ffffffffffffffffffffffffffffffffffffffff6c01000000000000000000000000909104811660c083015260048301541660e08201526005820180549192916101008401919061037f906110fd565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab906110fd565b80156103f85780601f106103cd576101008083540402835291602001916103f8565b820191906000526020600020905b8154815290600101906020018083116103db57829003601f168201915b5050505050815250509050919050565b6040517fa182e38c00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a182e38c9061048f908e908e908e908e908e908e908e908e908e908e90600401611199565b600060405180830381600087803b1580156104a957600080fd5b505af11580156104bd573d6000803e3d6000fd5b505050506104d08b8b8b8b8b8b8b6105bc565b9b9a5050505050505050505050565b6104e98133610b97565b50565b6040517f1863f01d0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff858116602483015260ff8516604483015260648201849052608482018390527f00000000000000000000000000000000000000000000000000000000000000001690631863f01d9060a401600060405180830381600087803b15801561059357600080fd5b505af11580156105a7573d6000803e3d6000fd5b505050506105b58585610b97565b5050505050565b600063ffffffff8616158015906105df57504263ffffffff168663ffffffff1611155b15610616576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f72487d52000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906372487d5290602401600060405180830381865afa1580156106a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106ea91908101906112b7565b8051909150610725576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602081015173ffffffffffffffffffffffffffffffffffffffff8116156108b95734158015906107c157508073ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf91906113bd565b155b156107f8576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16631bca4420348c85606001518a8a8e8b6040518863ffffffff1660e01b8152600401610840969594939291906113df565b60206040518083038185885af115801561085e573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061088391906113bd565b6108b9576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061012001604052806000801b81526020018b81526020018981526020016108e34290565b63ffffffff1681526020018a63ffffffff168152602001600063ffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200188888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091508190505b6109898382610d2c565b600081815260208190526040902054909250156109a85760010161097f565b81835260008281526020818152604091829020855181559085015160018201559084015160028201556060840151600382018054608087015160a088015160c089015163ffffffff9586167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090941693909317640100000000928616929092029190911767ffffffffffffffff166801000000000000000094909116939093026bffffffffffffffffffffffff16929092176c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9384160217905560e08501516004830180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919092161790556101008401518491906005820190610ad09082611493565b50508a159050610b1f5760008a815260208190526040902054610b1f576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b8773ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b3585604051610b7f91815260200190565b60405180910390a4509b9a5050505050505050505050565b60008281526020819052604090208054610bdd576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600481015473ffffffffffffffffffffffffffffffffffffffff838116911614610c33576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600381015468010000000000000000900463ffffffff1615610c81576040517f905e710700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003810180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff42160217908190556001820154604080518681529051919273ffffffffffffffffffffffffffffffffffffffff868116936c0100000000000000000000000090920416917ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615919081900360200190a4505050565b600082602001518360c001518460e001518560600151866080015187610100015187604051602001610d6497969594939291906115ad565b60405160208183030381529060405280519060200120905092915050565b73ffffffffffffffffffffffffffffffffffffffff811681146104e957600080fd5b803563ffffffff81168114610db857600080fd5b919050565b60008083601f840112610dcf57600080fd5b50813567ffffffffffffffff811115610de757600080fd5b602083019150836020828501011115610dff57600080fd5b9250929050565b60008060008060008060a08789031215610e1f57600080fd5b8635610e2a81610d82565b955060208701359450610e3f60408801610da4565b935060608701359250608087013567ffffffffffffffff811115610e6257600080fd5b610e6e89828a01610dbd565b979a9699509497509295939492505050565b600060208284031215610e9257600080fd5b5035919050565b60005b83811015610eb4578181015183820152602001610e9c565b50506000910152565b60008151808452610ed5816020860160208601610e99565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815281516020820152602082015160408201526040820151606082015260006060830151610f3f608084018263ffffffff169052565b50608083015163ffffffff811660a08401525060a083015163ffffffff811660c08401525060c083015173ffffffffffffffffffffffffffffffffffffffff811660e08401525060e0830151610100610faf8185018373ffffffffffffffffffffffffffffffffffffffff169052565b840151610120848101529050610fc9610140840182610ebd565b949350505050565b803560ff81168114610db857600080fd5b6000806000806000806000806000806101208b8d03121561100257600080fd5b8a3561100d81610d82565b995060208b0135985061102260408c01610da4565b975060608b0135965060808b013567ffffffffffffffff81111561104557600080fd5b6110518d828e01610dbd565b90975095505060a08b013561106581610d82565b935061107360c08c01610fd1565b925060e08b013591506101008b013590509295989b9194979a5092959850565b600080600080600060a086880312156110ab57600080fd5b8535945060208601356110bd81610d82565b93506110cb60408701610fd1565b94979396509394606081013594506080013592915050565b6020815260006110f66020830184610ebd565b9392505050565b600181811c9082168061111157607f821691505b60208210810361114a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600061012073ffffffffffffffffffffffffffffffffffffffff808e1684528c602085015263ffffffff8c1660408501528a60608501528160808501526111e38285018a8c611150565b971660a0840152505060ff9390931660c084015260e0830191909152610100909101529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561126257611262611210565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156112af576112af611210565b604052919050565b600060208083850312156112ca57600080fd5b825167ffffffffffffffff808211156112e257600080fd5b90840190608082870312156112f657600080fd5b6112fe61123f565b825181528383015161130f81610d82565b818501526040838101519082015260608301518281111561132f57600080fd5b80840193505086601f84011261134457600080fd5b82518281111561135657611356611210565b611386857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611268565b9250808352878582860101111561139c57600080fd5b6113ab81868501878701610e99565b50606081019190915295945050505050565b6000602082840312156113cf57600080fd5b815180151581146110f657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff808916835260a0602084015261140f60a0840189610ebd565b838103604085015261142281888a611150565b63ffffffff969096166060850152509290921660809091015250949350505050565b601f82111561148e57600081815260208120601f850160051c8101602086101561146b5750805b601f850160051c820191505b8181101561148a57828155600101611477565b5050505b505050565b815167ffffffffffffffff8111156114ad576114ad611210565b6114c1816114bb84546110fd565b84611444565b602080601f83116001811461151457600084156114de5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561148a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561156157888601518255948401946001909101908401611542565b508582101561159d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b87815260007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808960601b166020840152808860601b166034840152507fffffffff00000000000000000000000000000000000000000000000000000000808760e01b166048840152808660e01b16604c8401528451611634816050860160208901610e99565b60e09490941b1691909201605081019190915260540197965050505050505056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attest(address,bytes32,uint32,bytes32,bytes)": {
        "details": "Attests to a specific AS.",
        "params": {
          "data": "Additional custom data.",
          "expirationTime": "The expiration time of the attestation.",
          "recipient": "The recipient of the attestation.",
          "refUUID": "An optional related attestation's UUID.",
          "schema": "The UUID of the AS."
        },
        "returns": {
          "_0": "The UUID of the new attestation."
        }
      },
      "attestByDelegation(address,bytes32,uint32,bytes32,bytes,address,uint8,bytes32,bytes32)": {
        "details": "Attests to a specific AS using a provided EIP712 signature.",
        "params": {
          "attester": "The attesting account.",
          "data": "Additional custom data.",
          "expirationTime": "The expiration time of the attestation.",
          "r": "The x-coordinate of the nonce R.",
          "recipient": "The recipient of the attestation.",
          "refUUID": "An optional related attestation's UUID.",
          "s": "The signature data.",
          "schema": "The UUID of the AS.",
          "v": "The recovery ID."
        },
        "returns": {
          "_0": "The UUID of the new attestation."
        }
      },
      "constructor": {
        "details": "Creates a new EAS instance.",
        "params": {
          "registry": "The address of the global AS registry.",
          "verifier": "The address of the EIP712 verifier."
        }
      },
      "getASRegistry()": {
        "details": "Returns the address of the AS global registry.",
        "returns": {
          "_0": "The address of the AS global registry."
        }
      },
      "getAttestation(bytes32)": {
        "details": "Returns an existing attestation by UUID.",
        "params": {
          "uuid": "The UUID of the attestation to retrieve."
        },
        "returns": {
          "_0": "The attestation data members."
        }
      },
      "getEIP712Verifier()": {
        "details": "Returns the address of the EIP712 verifier used to verify signed attestations.",
        "returns": {
          "_0": "The address of the EIP712 verifier used to verify signed attestations."
        }
      },
      "isAttestationValid(bytes32)": {
        "details": "Checks whether an attestation exists.",
        "params": {
          "uuid": "The UUID of the attestation to retrieve."
        },
        "returns": {
          "_0": "Whether an attestation exists."
        }
      },
      "revoke(bytes32)": {
        "details": "Revokes an existing attestation to a specific AS.",
        "params": {
          "uuid": "The UUID of the attestation to revoke."
        }
      },
      "revokeByDelegation(bytes32,address,uint8,bytes32,bytes32)": {
        "details": "Attests to a specific AS using a provided EIP712 signature.",
        "params": {
          "attester": "The attesting account.",
          "r": "The x-coordinate of the nonce R.",
          "s": "The signature data.",
          "uuid": "The UUID of the attestation to revoke.",
          "v": "The recovery ID."
        }
      }
    },
    "title": "EAS - Ethereum Attestation Service",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2310,
        "contract": "contracts/EAS.sol:EAS",
        "label": "_db",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Attestation)3114_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Attestation)3114_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Attestation)",
        "numberOfBytes": "32",
        "value": "t_struct(Attestation)3114_storage"
      },
      "t_struct(Attestation)3114_storage": {
        "encoding": "inplace",
        "label": "struct Attestation",
        "members": [
          {
            "astId": 3097,
            "contract": "contracts/EAS.sol:EAS",
            "label": "uuid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3099,
            "contract": "contracts/EAS.sol:EAS",
            "label": "schema",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3101,
            "contract": "contracts/EAS.sol:EAS",
            "label": "refUUID",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3103,
            "contract": "contracts/EAS.sol:EAS",
            "label": "time",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 3105,
            "contract": "contracts/EAS.sol:EAS",
            "label": "expirationTime",
            "offset": 4,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 3107,
            "contract": "contracts/EAS.sol:EAS",
            "label": "revocationTime",
            "offset": 8,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 3109,
            "contract": "contracts/EAS.sol:EAS",
            "label": "recipient",
            "offset": 12,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3111,
            "contract": "contracts/EAS.sol:EAS",
            "label": "attester",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3113,
            "contract": "contracts/EAS.sol:EAS",
            "label": "data",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}