/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../common";
import type {
  SchemaRegistry,
  SchemaRegistryInterface,
} from "../../contracts/SchemaRegistry";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "AlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "uuid",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "registerer",
        type: "address",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "uuid",
        type: "bytes32",
      },
    ],
    name: "getSchema",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uuid",
            type: "bytes32",
          },
          {
            internalType: "contract ISchemaResolver",
            name: "resolver",
            type: "address",
          },
          {
            internalType: "string",
            name: "schema",
            type: "string",
          },
        ],
        internalType: "struct SchemaRecord",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "schema",
        type: "string",
      },
      {
        internalType: "contract ISchemaResolver",
        name: "resolver",
        type: "address",
      },
    ],
    name: "register",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610750806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631e59c52914610046578063a2ea7c6e1461006c578063ffa1ad741461008c575b600080fd5b610059610054366004610384565b6100d5565b6040519081526020015b60405180910390f35b61007f61007a366004610420565b610250565b60405161006391906104a7565b6100c86040518060400160405280600481526020017f302e31340000000000000000000000000000000000000000000000000000000081525081565b60405161006391906104f4565b60008060405180606001604052806000801b81526020018473ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061014f90508261034a565b60008181526020819052604090205490915015610198576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409182902084518155908401516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905590830151839190600282019061020f90826105df565b50506040513381528291507f7d917fcbc9a29a9705ff9936ffa599500e4fd902e4486bae317414fe967b307c9060200160405180910390a295945050505050565b6040805160608082018352600080835260208301529181019190915260008281526020818152604091829020825160608101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff169281019290925260028101805492939192918401916102c19061053d565b80601f01602080910402602001604051908101604052809291908181526020018280546102ed9061053d565b801561033a5780601f1061030f5761010080835404028352916020019161033a565b820191906000526020600020905b81548152906001019060200180831161031d57829003601f168201915b5050505050815250509050919050565b6000816040015182602001516040516020016103679291906106f9565b604051602081830303815290604052805190602001209050919050565b60008060006040848603121561039957600080fd5b833567ffffffffffffffff808211156103b157600080fd5b818601915086601f8301126103c557600080fd5b8135818111156103d457600080fd5b8760208285010111156103e657600080fd5b6020928301955093505084013573ffffffffffffffffffffffffffffffffffffffff8116811461041557600080fd5b809150509250925092565b60006020828403121561043257600080fd5b5035919050565b60005b8381101561045457818101518382015260200161043c565b50506000910152565b60008151808452610475816020860160208601610439565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152600060408301516060808401526104ec608084018261045d565b949350505050565b602081526000610507602083018461045d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061055157607f821691505b60208210810361058a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156105da57600081815260208120601f850160051c810160208610156105b75750805b601f850160051c820191505b818110156105d6578281556001016105c3565b5050505b505050565b815167ffffffffffffffff8111156105f9576105f961050e565b61060d81610607845461053d565b84610590565b602080601f831160018114610660576000841561062a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556105d6565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156106ad5788860151825594840194600190910190840161068e565b50858210156106e957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b6000835161070b818460208801610439565b60609390931b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016919092019081526014019291505056fea164736f6c6343000811000a";

type SchemaRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SchemaRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SchemaRegistry__factory extends ContractFactory {
  constructor(...args: SchemaRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SchemaRegistry> {
    return super.deploy(overrides || {}) as Promise<SchemaRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SchemaRegistry {
    return super.attach(address) as SchemaRegistry;
  }
  override connect(signer: Signer): SchemaRegistry__factory {
    return super.connect(signer) as SchemaRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SchemaRegistryInterface {
    return new utils.Interface(_abi) as SchemaRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SchemaRegistry {
    return new Contract(address, _abi, signerOrProvider) as SchemaRegistry;
  }
}
