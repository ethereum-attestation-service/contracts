/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type AttestationStruct = {
  uuid: PromiseOrValue<BytesLike>;
  schema: PromiseOrValue<BytesLike>;
  refUUID: PromiseOrValue<BytesLike>;
  time: PromiseOrValue<BigNumberish>;
  expirationTime: PromiseOrValue<BigNumberish>;
  revocationTime: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
  attester: PromiseOrValue<string>;
  revocable: PromiseOrValue<boolean>;
  data: PromiseOrValue<BytesLike>;
};

export type AttestationStructOutput = [
  string,
  string,
  string,
  number,
  number,
  number,
  string,
  string,
  boolean,
  string
] & {
  uuid: string;
  schema: string;
  refUUID: string;
  time: number;
  expirationTime: number;
  revocationTime: number;
  recipient: string;
  attester: string;
  revocable: boolean;
  data: string;
};

export interface EASInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "attest(address,bytes32,uint32,bool,bytes32,bytes)": FunctionFragment;
    "attestByDelegation(address,bytes32,uint32,bool,bytes32,bytes,address,uint8,bytes32,bytes32)": FunctionFragment;
    "getAttestation(bytes32)": FunctionFragment;
    "getEIP712Verifier()": FunctionFragment;
    "getSchemaRegistry()": FunctionFragment;
    "isAttestationValid(bytes32)": FunctionFragment;
    "revoke(bytes32)": FunctionFragment;
    "revokeByDelegation(bytes32,address,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "attest"
      | "attestByDelegation"
      | "getAttestation"
      | "getEIP712Verifier"
      | "getSchemaRegistry"
      | "isAttestationValid"
      | "revoke"
      | "revokeByDelegation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "attest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attestByDelegation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEIP712Verifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemaRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestationValid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeByDelegation",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEIP712Verifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchemaRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestationValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeByDelegation",
    data: BytesLike
  ): Result;

  events: {
    "Attested(address,address,bytes32,bytes32)": EventFragment;
    "Revoked(address,address,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export interface AttestedEventObject {
  recipient: string;
  attester: string;
  uuid: string;
  schema: string;
}
export type AttestedEvent = TypedEvent<
  [string, string, string, string],
  AttestedEventObject
>;

export type AttestedEventFilter = TypedEventFilter<AttestedEvent>;

export interface RevokedEventObject {
  recipient: string;
  attester: string;
  uuid: string;
  schema: string;
}
export type RevokedEvent = TypedEvent<
  [string, string, string, string],
  RevokedEventObject
>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface EAS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EASInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    attest(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attestByDelegation(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAttestation(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput]>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<[string]>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<[string]>;

    isAttestationValid(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revoke(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeByDelegation(
      uuid: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  attest(
    recipient: PromiseOrValue<string>,
    schema: PromiseOrValue<BytesLike>,
    expirationTime: PromiseOrValue<BigNumberish>,
    revocable: PromiseOrValue<boolean>,
    refUUID: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attestByDelegation(
    recipient: PromiseOrValue<string>,
    schema: PromiseOrValue<BytesLike>,
    expirationTime: PromiseOrValue<BigNumberish>,
    revocable: PromiseOrValue<boolean>,
    refUUID: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    attester: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAttestation(
    uuid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput>;

  getEIP712Verifier(overrides?: CallOverrides): Promise<string>;

  getSchemaRegistry(overrides?: CallOverrides): Promise<string>;

  isAttestationValid(
    uuid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revoke(
    uuid: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeByDelegation(
    uuid: PromiseOrValue<BytesLike>,
    attester: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    attest(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    attestByDelegation(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttestation(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<string>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<string>;

    isAttestationValid(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revoke(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeByDelegation(
      uuid: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Attested(address,address,bytes32,bytes32)"(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uuid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): AttestedEventFilter;
    Attested(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uuid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): AttestedEventFilter;

    "Revoked(address,address,bytes32,bytes32)"(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uuid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): RevokedEventFilter;
    Revoked(
      recipient?: PromiseOrValue<string> | null,
      attester?: PromiseOrValue<string> | null,
      uuid?: null,
      schema?: PromiseOrValue<BytesLike> | null
    ): RevokedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    attest(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attestByDelegation(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAttestation(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<BigNumber>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    isAttestationValid(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeByDelegation(
      uuid: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    attest(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attestByDelegation(
      recipient: PromiseOrValue<string>,
      schema: PromiseOrValue<BytesLike>,
      expirationTime: PromiseOrValue<BigNumberish>,
      revocable: PromiseOrValue<boolean>,
      refUUID: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAttestation(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEIP712Verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAttestationValid(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revoke(
      uuid: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeByDelegation(
      uuid: PromiseOrValue<BytesLike>,
      attester: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
