{
  "address": "0xB1B5824B318eC213c6207256ec702B0bd7656EFb",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "contract ISchemaResolver",
          "name": "resolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "getSchema",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uuid",
              "type": "bytes32"
            },
            {
              "internalType": "contract ISchemaResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "schema",
              "type": "bytes"
            }
          ],
          "internalType": "struct SchemaRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSchemaCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "internalType": "contract ISchemaResolver",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc985c7d181f82e3e98035d79dc209053f2566993ee2365b919a6b7228d5e2ab",
  "receipt": {
    "to": null,
    "from": "0x01a93612f26100B6E18a2e3dd57df5c3ccaFeca1",
    "contractAddress": "0xB1B5824B318eC213c6207256ec702B0bd7656EFb",
    "transactionIndex": 8,
    "gasUsed": "502059",
    "logsBloom": "0x
    "blockHash": "0xbdac70cfb2acbda382fe02e839839d7aba6086e1561d82546a4991508136c75c",
    "transactionHash": "0xdc985c7d181f82e3e98035d79dc209053f2566993ee2365b919a6b7228d5e2ab",
    "logs": [],
    "blockNumber": 7706931,
    "cumulativeGasUsed": "4898003",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "69c4a05e6e6abc272995d4669c86d291",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchemaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getSchema(bytes32)\":{\"details\":\"Returns an existing schema by UUID\",\"params\":{\"uuid\":\"The UUID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"getSchemaCount()\":{\"details\":\"Returns the global counter for the total number of schemas\",\"returns\":{\"_0\":\"The global counter for the total number of schemas.\"}},\"register(bytes,address)\":{\"details\":\"Submits and reserves a new schema\",\"params\":{\"resolver\":\"An optional schema resolver.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UUID of the new AS.\"}}},\"title\":\"The global schema registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SchemaRegistry.sol\":\"SchemaRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted schema.\\n */\\nstruct SchemaRecord {\\n    // A unique identifier of the schema.\\n    bytes32 uuid;\\n    // Optional schema resolver.\\n    ISchemaResolver resolver;\\n    // Auto-incrementing index for reference, assigned by the registry itself.\\n    uint256 index;\\n    // Custom specification of the schema (e.g., an ABI).\\n    bytes schema;\\n}\\n\\n/**\\n * @title The global schema registry interface.\\n */\\ninterface ISchemaRegistry {\\n    /**\\n     * @dev Triggered when a new schema has been registered\\n     *\\n     * @param uuid The schema UUID.\\n     * @param index The schema index.\\n     * @param schema The schema schema.\\n     * @param resolver An optional schema resolver.\\n     * @param attester The address of the account used to register the schema.\\n     */\\n    event Registered(\\n        bytes32 indexed uuid,\\n        uint256 indexed index,\\n        bytes schema,\\n        ISchemaResolver resolver,\\n        address attester\\n    );\\n\\n    /**\\n     * @dev Submits and reserves a new schema\\n     *\\n     * @param schema The schema data schema.\\n     * @param resolver An optional schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, ISchemaResolver resolver) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing schema by UUID\\n     *\\n     * @param uuid The UUID of the schema to retrieve.\\n     *\\n     * @return The schema data members.\\n     */\\n    function getSchema(bytes32 uuid) external view returns (SchemaRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of schemas\\n     *\\n     * @return The global counter for the total number of schemas.\\n     */\\n    function getSchemaCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x639473441bf1ac4b182685694904ff7da4fdfbf71a8db7f7201a31d43948d5be\",\"license\":\"MIT\"},\"contracts/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title The interface of an optional schema resolver.\\n */\\ninterface ISchemaResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The schema data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint32 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x11a11dcc5cd14fc6549097d194daeb5cd98efdc96cf46490de8b2cedd4bd09b0\",\"license\":\"MIT\"},\"contracts/SchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { EMPTY_UUID } from \\\"./Types.sol\\\";\\nimport { ISchemaRegistry, SchemaRecord } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISchemaResolver } from \\\"./ISchemaResolver.sol\\\";\\n\\n/**\\n * @title The global schema registry.\\n */\\ncontract SchemaRegistry is ISchemaRegistry {\\n    error AlreadyExists();\\n\\n    string public constant VERSION = \\\"0.10\\\";\\n\\n    // The global mapping between schema records and their IDs.\\n    mapping(bytes32 => SchemaRecord) private _registry;\\n\\n    // The global counter for the total number of attestations.\\n    uint256 private _schemaCount;\\n\\n    /**\\n     * @inheritdoc ISchemaRegistry\\n     */\\n    function register(bytes calldata schema, ISchemaResolver resolver) external returns (bytes32) {\\n        uint256 index;\\n        unchecked {\\n            index = ++_schemaCount;\\n        }\\n\\n        SchemaRecord memory schemaRecord = SchemaRecord({\\n            uuid: EMPTY_UUID,\\n            index: index,\\n            schema: schema,\\n            resolver: resolver\\n        });\\n\\n        bytes32 uuid = _getUUID(schemaRecord);\\n        if (_registry[uuid].uuid != EMPTY_UUID) {\\n            revert AlreadyExists();\\n        }\\n\\n        schemaRecord.uuid = uuid;\\n        _registry[uuid] = schemaRecord;\\n\\n        emit Registered(uuid, index, schema, resolver, msg.sender);\\n\\n        return uuid;\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaRegistry\\n     */\\n    function getSchema(bytes32 uuid) external view returns (SchemaRecord memory) {\\n        return _registry[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc ISchemaRegistry\\n     */\\n    function getSchemaCount() external view returns (uint256) {\\n        return _schemaCount;\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given AS.\\n     *\\n     * @param schemaRecord The input AS.\\n     *\\n     * @return schema UUID.\\n     */\\n    function _getUUID(SchemaRecord memory schemaRecord) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(schemaRecord.schema, schemaRecord.resolver));\\n    }\\n}\\n\",\"keccak256\":\"0xac742c2e15c2b9ff7c85f3a80c310e3b88135f6dd91230b1b648ca8a1b39befc\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0xc3004382d564d0a80a41b11c26adc527324525447842c6b349b32c08fbab747d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610826806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a2ea7c6e14610051578063a99e7e291461007a578063d42e92bb1461009b578063ffa1ad74146100a3575b600080fd5b61006461005f3660046103de565b6100ec565b6040516100719190610465565b60405180910390f35b61008d6100883660046104bc565b6101fa565b604051908152602001610071565b60015461008d565b6100df6040518060400160405280600481526020017f302e31300000000000000000000000000000000000000000000000000000000081525081565b6040516100719190610558565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff169281019290925260028101549282019290925260038201805491929160608401919061017190610572565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610572565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815250509050919050565b6000806001600081546001019190508190559050600060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061028d9050826103a4565b600081815260208190526040902054909150156102d6576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409182902084518155908401516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055908301516002820155606083015183919060038201906103579082610643565b5090505082817f51a1a037ef8a642f8b5528429785b5a54e6ee54fb2d2db4b4a44480b5302d55b89898933604051610392949392919061075d565b60405180910390a39695505050505050565b6000816060015182602001516040516020016103c19291906107cf565b604051602081830303815290604052805190602001209050919050565b6000602082840312156103f057600080fd5b5035919050565b60005b838110156104125781810151838201526020016103fa565b50506000910152565b600081518084526104338160208601602086016103f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff602083015116604082015260408201516060820152600060608301516080808401526104b460a084018261041b565b949350505050565b6000806000604084860312156104d157600080fd5b833567ffffffffffffffff808211156104e957600080fd5b818601915086601f8301126104fd57600080fd5b81358181111561050c57600080fd5b87602082850101111561051e57600080fd5b6020928301955093505084013573ffffffffffffffffffffffffffffffffffffffff8116811461054d57600080fd5b809150509250925092565b60208152600061056b602083018461041b565b9392505050565b600181811c9082168061058657607f821691505b6020821081036105bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561063e57600081815260208120601f850160051c8101602086101561061b5750805b601f850160051c820191505b8181101561063a57828155600101610627565b5050505b505050565b815167ffffffffffffffff81111561065d5761065d6105c5565b6106718161066b8454610572565b846105f4565b602080601f8311600181146106c4576000841561068e5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561063a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610711578886015182559484019460019091019084016106f2565b508582101561074d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60608152836060820152838560808301376000608085830181019190915273ffffffffffffffffffffffffffffffffffffffff9384166020830152919092166040830152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600083516107e18184602088016103f7565b60609390931b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016919092019081526014019291505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063a2ea7c6e14610051578063a99e7e291461007a578063d42e92bb1461009b578063ffa1ad74146100a3575b600080fd5b61006461005f3660046103de565b6100ec565b6040516100719190610465565b60405180910390f35b61008d6100883660046104bc565b6101fa565b604051908152602001610071565b60015461008d565b6100df6040518060400160405280600481526020017f302e31300000000000000000000000000000000000000000000000000000000081525081565b6040516100719190610558565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff169281019290925260028101549282019290925260038201805491929160608401919061017190610572565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610572565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815250509050919050565b6000806001600081546001019190508190559050600060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061028d9050826103a4565b600081815260208190526040902054909150156102d6576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409182902084518155908401516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055908301516002820155606083015183919060038201906103579082610643565b5090505082817f51a1a037ef8a642f8b5528429785b5a54e6ee54fb2d2db4b4a44480b5302d55b89898933604051610392949392919061075d565b60405180910390a39695505050505050565b6000816060015182602001516040516020016103c19291906107cf565b604051602081830303815290604052805190602001209050919050565b6000602082840312156103f057600080fd5b5035919050565b60005b838110156104125781810151838201526020016103fa565b50506000910152565b600081518084526104338160208601602086016103f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff602083015116604082015260408201516060820152600060608301516080808401526104b460a084018261041b565b949350505050565b6000806000604084860312156104d157600080fd5b833567ffffffffffffffff808211156104e957600080fd5b818601915086601f8301126104fd57600080fd5b81358181111561050c57600080fd5b87602082850101111561051e57600080fd5b6020928301955093505084013573ffffffffffffffffffffffffffffffffffffffff8116811461054d57600080fd5b809150509250925092565b60208152600061056b602083018461041b565b9392505050565b600181811c9082168061058657607f821691505b6020821081036105bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561063e57600081815260208120601f850160051c8101602086101561061b5750805b601f850160051c820191505b8181101561063a57828155600101610627565b5050505b505050565b815167ffffffffffffffff81111561065d5761065d6105c5565b6106718161066b8454610572565b846105f4565b602080601f8311600181146106c4576000841561068e5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561063a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610711578886015182559484019460019091019084016106f2565b508582101561074d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60608152836060820152838560808301376000608085830181019190915273ffffffffffffffffffffffffffffffffffffffff9384166020830152919092166040830152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600083516107e18184602088016103f7565b60609390931b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016919092019081526014019291505056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getSchema(bytes32)": {
        "details": "Returns an existing schema by UUID",
        "params": {
          "uuid": "The UUID of the schema to retrieve."
        },
        "returns": {
          "_0": "The schema data members."
        }
      },
      "getSchemaCount()": {
        "details": "Returns the global counter for the total number of schemas",
        "returns": {
          "_0": "The global counter for the total number of schemas."
        }
      },
      "register(bytes,address)": {
        "details": "Submits and reserves a new schema",
        "params": {
          "resolver": "An optional schema resolver.",
          "schema": "The schema data schema."
        },
        "returns": {
          "_0": "The UUID of the new AS."
        }
      }
    },
    "title": "The global schema registry.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 846,
        "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(SchemaRecord)756_storage)"
      },
      {
        "astId": 848,
        "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
        "label": "_schemaCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ISchemaResolver)824": {
        "encoding": "inplace",
        "label": "contract ISchemaResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(SchemaRecord)756_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SchemaRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(SchemaRecord)756_storage"
      },
      "t_struct(SchemaRecord)756_storage": {
        "encoding": "inplace",
        "label": "struct SchemaRecord",
        "members": [
          {
            "astId": 748,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "uuid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 751,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISchemaResolver)824"
          },
          {
            "astId": 753,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 755,
            "contract": "contracts/SchemaRegistry.sol:SchemaRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}