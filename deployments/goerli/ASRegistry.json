{
  "address": "0x7b24C7f8AF365B4E308b6acb0A7dfc85d034Cb3f",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "contract IASResolver",
          "name": "resolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "getAS",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uuid",
              "type": "bytes32"
            },
            {
              "internalType": "contract IASResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "schema",
              "type": "bytes"
            }
          ],
          "internalType": "struct ASRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getASCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "internalType": "contract IASResolver",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x236b20d0a213281683f8bdb5abfbd4e6055b4578806fe10ded529bf1017cade7",
  "receipt": {
    "to": null,
    "from": "0x01a93612f26100B6E18a2e3dd57df5c3ccaFeca1",
    "contractAddress": "0x7b24C7f8AF365B4E308b6acb0A7dfc85d034Cb3f",
    "transactionIndex": 1,
    "gasUsed": "502059",
    "logsBloom": "0x
    "blockHash": "0x33148168fa5b27e81fe787417dc2e854acd8311e61101c63d8544b62ccd723c3",
    "transactionHash": "0x236b20d0a213281683f8bdb5abfbd4e6055b4578806fe10ded529bf1017cade7",
    "logs": [],
    "blockNumber": 7705596,
    "cumulativeGasUsed": "559280",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3d7214a23a94ba3c1d0721cea36f8c55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"contract IASResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"getAS\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"contract IASResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"}],\"internalType\":\"struct ASRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getASCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"internalType\":\"contract IASResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAS(bytes32)\":{\"details\":\"Returns an existing AS by UUID\",\"params\":{\"uuid\":\"The UUID of the AS to retrieve.\"},\"returns\":{\"_0\":\"The AS data members.\"}},\"getASCount()\":{\"details\":\"Returns the global counter for the total number of attestations\",\"returns\":{\"_0\":\"The global counter for the total number of attestations.\"}},\"register(bytes,address)\":{\"details\":\"Submits and reserve a new AS\",\"params\":{\"resolver\":\"An optional AS schema resolver.\",\"schema\":\"The AS data schema.\"},\"returns\":{\"_0\":\"The UUID of the new AS.\"}}},\"title\":\"The global AS registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ASRegistry.sol\":\"ASRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/ASRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { EMPTY_UUID } from \\\"./Types.sol\\\";\\nimport { IASRegistry, ASRecord } from \\\"./IASRegistry.sol\\\";\\nimport { IASResolver } from \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title The global AS registry.\\n */\\ncontract ASRegistry is IASRegistry {\\n    error AlreadyExists();\\n\\n    string public constant VERSION = \\\"0.10\\\";\\n\\n    // The global mapping between AS records and their IDs.\\n    mapping(bytes32 => ASRecord) private _registry;\\n\\n    // The global counter for the total number of attestations.\\n    uint256 private _asCount;\\n\\n    /**\\n     * @inheritdoc IASRegistry\\n     */\\n    function register(bytes calldata schema, IASResolver resolver) external returns (bytes32) {\\n        uint256 index;\\n        unchecked {\\n            index = ++_asCount;\\n        }\\n\\n        ASRecord memory asRecord = ASRecord({ uuid: EMPTY_UUID, index: index, schema: schema, resolver: resolver });\\n\\n        bytes32 uuid = _getUUID(asRecord);\\n        if (_registry[uuid].uuid != EMPTY_UUID) {\\n            revert AlreadyExists();\\n        }\\n\\n        asRecord.uuid = uuid;\\n        _registry[uuid] = asRecord;\\n\\n        emit Registered(uuid, index, schema, resolver, msg.sender);\\n\\n        return uuid;\\n    }\\n\\n    /**\\n     * @inheritdoc IASRegistry\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory) {\\n        return _registry[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc IASRegistry\\n     */\\n    function getASCount() external view returns (uint256) {\\n        return _asCount;\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given AS.\\n     *\\n     * @param asRecord The input AS.\\n     *\\n     * @return AS UUID.\\n     */\\n    function _getUUID(ASRecord memory asRecord) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(asRecord.schema, asRecord.resolver));\\n    }\\n}\\n\",\"keccak256\":\"0xc23a272b4019e0bb01c66368136e7e77519a0c3b7bf7d4ef00649401919fb7c4\",\"license\":\"MIT\"},\"contracts/IASRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IASResolver } from \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title A struct representing a record for a submitted AS (Attestation Schema).\\n */\\nstruct ASRecord {\\n    // A unique identifier of the AS.\\n    bytes32 uuid;\\n    // Optional schema resolver.\\n    IASResolver resolver;\\n    // Auto-incrementing index for reference, assigned by the registry itself.\\n    uint256 index;\\n    // Custom specification of the AS (e.g., an ABI).\\n    bytes schema;\\n}\\n\\n/**\\n * @title The global AS registry interface.\\n */\\ninterface IASRegistry {\\n    /**\\n     * @dev Triggered when a new AS has been registered\\n     *\\n     * @param uuid The AS UUID.\\n     * @param index The AS index.\\n     * @param schema The AS schema.\\n     * @param resolver An optional AS schema resolver.\\n     * @param attester The address of the account used to register the AS.\\n     */\\n    event Registered(bytes32 indexed uuid, uint256 indexed index, bytes schema, IASResolver resolver, address attester);\\n\\n    /**\\n     * @dev Submits and reserve a new AS\\n     *\\n     * @param schema The AS data schema.\\n     * @param resolver An optional AS schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, IASResolver resolver) external returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing AS by UUID\\n     *\\n     * @param uuid The UUID of the AS to retrieve.\\n     *\\n     * @return The AS data members.\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getASCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e7d2c8cdfac957f5e77a68a8c0dce20b13b97d3d3e37766fa604c41457386c1\",\"license\":\"MIT\"},\"contracts/IASResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title The interface of an optional AS resolver.\\n */\\ninterface IASResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers.\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The AS data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint32 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x3cd2e7df7d2c2c89b23d0cf85148e36384cced327f214ea266fa5217fad88e48\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0xc3004382d564d0a80a41b11c26adc527324525447842c6b349b32c08fbab747d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610826806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806372487d5214610051578063a99e7e291461007a578063d96250641461009b578063ffa1ad74146100a3575b600080fd5b61006461005f3660046103de565b6100ec565b6040516100719190610465565b60405180910390f35b61008d6100883660046104bc565b6101fa565b604051908152602001610071565b60015461008d565b6100df6040518060400160405280600481526020017f302e31300000000000000000000000000000000000000000000000000000000081525081565b6040516100719190610558565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff169281019290925260028101549282019290925260038201805491929160608401919061017190610572565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610572565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815250509050919050565b6000806001600081546001019190508190559050600060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061028d9050826103a4565b600081815260208190526040902054909150156102d6576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409182902084518155908401516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055908301516002820155606083015183919060038201906103579082610643565b5090505082817f51a1a037ef8a642f8b5528429785b5a54e6ee54fb2d2db4b4a44480b5302d55b89898933604051610392949392919061075d565b60405180910390a39695505050505050565b6000816060015182602001516040516020016103c19291906107cf565b604051602081830303815290604052805190602001209050919050565b6000602082840312156103f057600080fd5b5035919050565b60005b838110156104125781810151838201526020016103fa565b50506000910152565b600081518084526104338160208601602086016103f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff602083015116604082015260408201516060820152600060608301516080808401526104b460a084018261041b565b949350505050565b6000806000604084860312156104d157600080fd5b833567ffffffffffffffff808211156104e957600080fd5b818601915086601f8301126104fd57600080fd5b81358181111561050c57600080fd5b87602082850101111561051e57600080fd5b6020928301955093505084013573ffffffffffffffffffffffffffffffffffffffff8116811461054d57600080fd5b809150509250925092565b60208152600061056b602083018461041b565b9392505050565b600181811c9082168061058657607f821691505b6020821081036105bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561063e57600081815260208120601f850160051c8101602086101561061b5750805b601f850160051c820191505b8181101561063a57828155600101610627565b5050505b505050565b815167ffffffffffffffff81111561065d5761065d6105c5565b6106718161066b8454610572565b846105f4565b602080601f8311600181146106c4576000841561068e5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561063a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610711578886015182559484019460019091019084016106f2565b508582101561074d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60608152836060820152838560808301376000608085830181019190915273ffffffffffffffffffffffffffffffffffffffff9384166020830152919092166040830152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600083516107e18184602088016103f7565b60609390931b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016919092019081526014019291505056fea164736f6c6343000811000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806372487d5214610051578063a99e7e291461007a578063d96250641461009b578063ffa1ad74146100a3575b600080fd5b61006461005f3660046103de565b6100ec565b6040516100719190610465565b60405180910390f35b61008d6100883660046104bc565b6101fa565b604051908152602001610071565b60015461008d565b6100df6040518060400160405280600481526020017f302e31300000000000000000000000000000000000000000000000000000000081525081565b6040516100719190610558565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff169281019290925260028101549282019290925260038201805491929160608401919061017190610572565b80601f016020809104026020016040519081016040528092919081815260200182805461019d90610572565b80156101ea5780601f106101bf576101008083540402835291602001916101ea565b820191906000526020600020905b8154815290600101906020018083116101cd57829003601f168201915b5050505050815250509050919050565b6000806001600081546001019190508190559050600060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061028d9050826103a4565b600081815260208190526040902054909150156102d6576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8082526000818152602081815260409182902084518155908401516001820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055908301516002820155606083015183919060038201906103579082610643565b5090505082817f51a1a037ef8a642f8b5528429785b5a54e6ee54fb2d2db4b4a44480b5302d55b89898933604051610392949392919061075d565b60405180910390a39695505050505050565b6000816060015182602001516040516020016103c19291906107cf565b604051602081830303815290604052805190602001209050919050565b6000602082840312156103f057600080fd5b5035919050565b60005b838110156104125781810151838201526020016103fa565b50506000910152565b600081518084526104338160208601602086016103f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff602083015116604082015260408201516060820152600060608301516080808401526104b460a084018261041b565b949350505050565b6000806000604084860312156104d157600080fd5b833567ffffffffffffffff808211156104e957600080fd5b818601915086601f8301126104fd57600080fd5b81358181111561050c57600080fd5b87602082850101111561051e57600080fd5b6020928301955093505084013573ffffffffffffffffffffffffffffffffffffffff8116811461054d57600080fd5b809150509250925092565b60208152600061056b602083018461041b565b9392505050565b600181811c9082168061058657607f821691505b6020821081036105bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f82111561063e57600081815260208120601f850160051c8101602086101561061b5750805b601f850160051c820191505b8181101561063a57828155600101610627565b5050505b505050565b815167ffffffffffffffff81111561065d5761065d6105c5565b6106718161066b8454610572565b846105f4565b602080601f8311600181146106c4576000841561068e5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855561063a565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015610711578886015182559484019460019091019084016106f2565b508582101561074d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60608152836060820152838560808301376000608085830181019190915273ffffffffffffffffffffffffffffffffffffffff9384166020830152919092166040830152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b600083516107e18184602088016103f7565b60609390931b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016919092019081526014019291505056fea164736f6c6343000811000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAS(bytes32)": {
        "details": "Returns an existing AS by UUID",
        "params": {
          "uuid": "The UUID of the AS to retrieve."
        },
        "returns": {
          "_0": "The AS data members."
        }
      },
      "getASCount()": {
        "details": "Returns the global counter for the total number of attestations",
        "returns": {
          "_0": "The global counter for the total number of attestations."
        }
      },
      "register(bytes,address)": {
        "details": "Submits and reserve a new AS",
        "params": {
          "resolver": "An optional AS schema resolver.",
          "schema": "The AS data schema."
        },
        "returns": {
          "_0": "The UUID of the new AS."
        }
      }
    },
    "title": "The global AS registry.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2112,
        "contract": "contracts/ASRegistry.sol:ASRegistry",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(ASRecord)3021_storage)"
      },
      {
        "astId": 2114,
        "contract": "contracts/ASRegistry.sol:ASRegistry",
        "label": "_asCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IASResolver)3089": {
        "encoding": "inplace",
        "label": "contract IASResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(ASRecord)3021_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ASRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ASRecord)3021_storage"
      },
      "t_struct(ASRecord)3021_storage": {
        "encoding": "inplace",
        "label": "struct ASRecord",
        "members": [
          {
            "astId": 3013,
            "contract": "contracts/ASRegistry.sol:ASRegistry",
            "label": "uuid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3016,
            "contract": "contracts/ASRegistry.sol:ASRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IASResolver)3089"
          },
          {
            "astId": 3018,
            "contract": "contracts/ASRegistry.sol:ASRegistry",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3020,
            "contract": "contracts/ASRegistry.sol:ASRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}